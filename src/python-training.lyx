#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)

% custom listing style
%\lstdefinestyle{cpython}{
%  belowcaptionskip=1\baselineskip,
%  breaklines=true,
%  frame=L,
%  xleftmargin=\parindent,
%  language=Python,
%  showstringspaces=false,
%  basicstyle=\footnotesize\ttfamily,
%  keywordstyle=\bfseries\color{green!40!black},
%  commentstyle=\itshape\color{purple!40!black},
%  identifierstyle=\color{blue},
%  stringstyle=\color{orange},
%}

%basicstyle={\footnotesize\ttfamily}
%commentstyle={\itshape\color{green!40!black}}
%directivestyle={\bfseries\color{blue!40!black}}
%identifierstyle={\color{black}}
%indexstyle={\color{black}}
%keywordstyle={\bfseries\color{blue!40!black}}
%ndkeywordstyle={\bfseries\color{blue!40!black}}
%numberstyle={\color{orange}}
%procnamestyle={\color{blue}}
%stringstyle={\color{magenta}}
%tagstyle={\color{orange}}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "urlcolor=blue, linkcolor=black"
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\footnotesize\ttfamily},commentstyle={\itshape\color{green!40!black}},identifierstyle={\color{black}},indexstyle={\color{black}},keywordstyle={\bfseries\color{blue!40!black}},ndkeywordstyle={\bfseries\color{blue!40!black}},stringstyle={\color{magenta}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Python Training
\end_layout

\begin_layout Subtitle
Aresys internal course
\end_layout

\begin_layout Author
A.
\begin_inset space ~
\end_inset

Valentino
\end_layout

\begin_layout Date
June 2016
\end_layout

\begin_layout Institute
Copyright (C) 2016 Antonio Valentino
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution/Share-Alike (BY-SA) license."
target "http://creativecommons.org/licenses/by-sa/3.0/"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
pgfdeclareimage[height=0.5cm]{images/aresys}{images/aresys}
\end_layout

\begin_layout Plain Layout

%
\backslash
logo{
\backslash
pgfuseimage{images/aresys}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{%
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Itemize
Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Itemize
At *most* three subsections per section.
 
\end_layout

\begin_layout Itemize
Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Itemize
A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Itemize
In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Itemize
If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Language Overview
\end_layout

\begin_layout Subsection
What is Python
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Language features
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
General-purpose programming language
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 C, C++ and Java, 
\series bold
differently
\series default
 from Matlab
\end_layout

\begin_layout Itemize
Scripting, GUI, Web, scientific programming, ...
\end_layout

\end_deeper
\begin_layout Itemize
Multi paradigm
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 C++, 
\series bold
differently
\series default
 from Java
\end_layout

\begin_layout Itemize
OOP, procedural, and also a little bit functional
\end_layout

\end_deeper
\begin_layout Itemize
Interpreted
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 Java, 
\series bold
differently
\series default
 form C, C++ and Fortran
\end_layout

\begin_layout Itemize
you never have to worry about byte-code compilation
\end_layout

\end_deeper
\begin_layout Itemize
Focus on readability and productivity
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Typing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Dynamically typed
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 Matlab, 
\series bold
differently
\series default
 from C, C++ and Java
\end_layout

\end_deeper
\begin_layout Itemize
Strongly typed
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 C, C++ and Java, 
\series bold
differently
\series default
 from Tcl/Tk and Perl
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Typing: examples
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Perl
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Perl,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

DB<1> print "2" + 2
\end_layout

\begin_layout Plain Layout

4
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Python
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

>>> "2" + 2
\end_layout

\begin_layout Plain Layout

Traceback (most recent call last):
\end_layout

\begin_layout Plain Layout

  File "<stdin>", line 1, in <module>
\end_layout

\begin_layout Plain Layout

TypeError: Can't convert 'int' object to str
\end_layout

\begin_layout Plain Layout

implicitly
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Language versions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Python 2
\end_layout

\begin_deeper
\begin_layout Itemize
latest version: 2.7.11
\end_layout

\begin_layout Itemize
maintenance mode
\end_layout

\begin_layout Itemize
end of life: 2020
\end_layout

\end_deeper
\begin_layout Itemize
Python 3
\end_layout

\begin_deeper
\begin_layout Itemize
latest version: 3.5.1
\end_layout

\begin_layout Itemize
language cleanup
\end_layout

\begin_layout Itemize
drop a lot of deprecated features
\end_layout

\begin_layout Itemize

\series bold
breaks compatibility
\series default
 with Python 2 (e.g.
 
\family typewriter
\series bold
print
\family default
\series default
)
\end_layout

\begin_layout Itemize
...
 but not too much if you import from 
\family typewriter
\series bold
__future__
\end_layout

\begin_layout Itemize
in this presentation we will talk about Python 3
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Importing from 
\family typewriter
\series bold
__future__
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

from __future__ import print_function
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Implementations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
CPython (the reference and most widely used implementation written in C)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.python.org
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
PyPy (A fast python implementation with a JIT compiler)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pypy.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
compatibility: Python 2.7.10 and Python 3.2.5 (beta)
\end_layout

\end_deeper
\begin_layout Itemize
IronPython (Python running on .NET)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://ironpython.net
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
support for Python 2.7
\end_layout

\end_deeper
\begin_layout Itemize
Jython (Python running on the Java Virtual Machine)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.jython.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
support for Python 2.7
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Distributions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.python.org
\end_layout

\end_inset

: Official CPython distribution (for Python 2 and 3), interpreter and standard
 library (about 180 modules/packages)
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.continuum.io/why-anaconda
\end_layout

\end_inset

: Anaconda (Python 2 and 3 on Linux/Windows/Mac):
\end_layout

\begin_deeper
\begin_layout Itemize
includes a package manager and a huge collection of packages
\end_layout

\begin_layout Itemize
allows to manage different environments simultaneously
\end_layout

\begin_layout Itemize
plays well with binary extensions
\end_layout

\begin_layout Itemize
particularly suited for scientific users
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.enthought.com/products/canopy
\end_layout

\end_inset

: Enthought Canopy (Python 2 only)
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://python-xy.github.io
\end_layout

\end_inset

: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$Pyhton(x,y)$
\end_layout

\end_inset

 (Python 2 and windows only)
\end_layout

\begin_layout Itemize
Any GNU/Linux distribution
\end_layout

\end_deeper
\begin_layout Subsection
Dive in
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Hello, World!
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Python
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

print('Hello, World!')
\end_layout

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class HelloWorld
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public static void main(String[] args)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        System.out.println("Hello, world!");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Interpreter invocation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Run a script
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

$ python3 script.py
\end_layout

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Interactive mode
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

$ python3
\end_layout

\begin_layout Plain Layout

Python 3.5.1+ (Mar 30 2016, 22:46:26) on linux 
\end_layout

\begin_layout Plain Layout

Type "help", "copyright", "credits" or "license" for
\end_layout

\begin_layout Plain Layout

more information.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>>> import os
\end_layout

\begin_layout Plain Layout

>>> os.path.getsize('somefile.txt')
\end_layout

\begin_layout Plain Layout

20366
\end_layout

\begin_layout Plain Layout

>>> _
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Improved interactive shell: 
\emph on
Jupyter 
\emph default
(a.k.a.
 
\emph on
IPython)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The 
\emph on
Jupyter
\emph default
 (Qt)Console and the (web based)
\emph on
 notebook
\emph default
 provide:
\end_layout

\begin_layout Itemize
better auto-completion
\end_layout

\begin_layout Itemize
enhanced history management
\end_layout

\begin_layout Itemize
session profiles
\end_layout

\begin_layout Itemize
integration with the system shell
\end_layout

\begin_layout Itemize
integration with GUI envs and scientific tool-chains
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Links
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Jupyter Project: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://jupyter.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
IPython: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://ipython.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
On-line 
\emph on
Jupyter
\emph default
 notebook: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://try.jupyter.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
On-line interactive shell: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.python.org/shell
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Getting help
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\family typewriter
\series bold
\emph on
help
\family default
\series default
\emph default
 builtin function
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline true
status open

\begin_layout Plain Layout

help()
\end_layout

\end_inset

: start an interactive help session
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline true
status open

\begin_layout Plain Layout

help(soemthing)
\end_layout

\end_inset

: print help about an object or type
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline true
status open

\begin_layout Plain Layout

help('name')
\end_layout

\end_inset

: search for 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

 in built-in functions and types and print the relative help
\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\family typewriter
\series bold
\emph on
help
\family default
\series default
\emph default
 example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

>>> help(str)
\end_layout

\begin_layout Plain Layout

Help on class str in module builtins:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class str(object)
\end_layout

\begin_layout Plain Layout

|  str(object='') -> str
\end_layout

\begin_layout Plain Layout

|  str(bytes_or_buffer[, encoding[, errors]]) -> str
\end_layout

\begin_layout Plain Layout

|  ...
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Getting help in IPython
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

In [1]: str?
\end_layout

\begin_layout Plain Layout

Type:            type
\end_layout

\begin_layout Plain Layout

String form:     <class 'str'>
\end_layout

\begin_layout Plain Layout

Namespace:       Python builtin
\end_layout

\begin_layout Plain Layout

Init definition: str(self, *args, **kwargs)
\end_layout

\begin_layout Plain Layout

Docstring:
\end_layout

\begin_layout Plain Layout

str(object='') -> str
\end_layout

\begin_layout Plain Layout

str(bytes_or_buffer[, encoding[, errors]]) -> str
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Create a new string object from the given object.
\end_layout

\begin_layout Plain Layout

If encoding or errors is specified, then the object must
\end_layout

\begin_layout Plain Layout

expose a data buffer that will be decoded using the given
\end_layout

\begin_layout Plain Layout

encoding and error handler.
\end_layout

\begin_layout Plain Layout

Otherwise, returns the result of object.__str__()
\end_layout

\begin_layout Plain Layout

(if defined) or repr(object).
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Documentation string a.k.a.
 
\emph on
docstrings
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.4
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Docstring example
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def func(args):
\end_layout

\begin_layout Plain Layout

    '''Short descr.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Long description
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    pass
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.6
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Docstrings are used by the 
\family typewriter
\series bold
help
\family default
\series default
 function to display object help
\end_layout

\begin_layout Itemize
the 
\series bold
first string
\series default
 in the body of
\end_layout

\begin_deeper
\begin_layout Itemize
functions/methods
\end_layout

\begin_layout Itemize
types (classes)
\end_layout

\begin_layout Itemize
modules
\end_layout

\begin_layout Standard
is used as 
\emph on
docstring
\emph default
 
\end_layout

\end_deeper
\begin_layout Itemize
Docstrings are 
\emph on
properties
\emph default
 of the object (
\family typewriter
\series bold
__doc__
\family default
\series default
 special attribute)
\end_layout

\end_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Note
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Strings enclosed in 
\emph on
triple quote
\emph default
s (
\family typewriter
\series bold

\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline true
status open

\begin_layout Plain Layout

"""
\end_layout

\end_inset


\family default
\series default
 or 
\family typewriter
\series bold

\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline true
status open

\begin_layout Plain Layout

'''
\end_layout

\end_inset


\family default
\series default
\emph on
) are multi-line
\emph default
 strings
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introspection
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

In [1]: s = 'ciao'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: len(s)
\end_layout

\begin_layout Plain Layout

Out[2]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: type(s)
\end_layout

\begin_layout Plain Layout

Out[3]: str
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: type(2)
\end_layout

\begin_layout Plain Layout

Out[4]: int
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: isinstance(s, str)
\end_layout

\begin_layout Plain Layout

Out[5]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: hasattr(s, 'upper')
\end_layout

\begin_layout Plain Layout

Out[6]: True
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

In [6]: T = type(s)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [7]: two = T(2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [8]: two
\end_layout

\begin_layout Plain Layout

Out[8]: '2'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: dir(s)
\end_layout

\begin_layout Plain Layout

Out[9]: ['__add__',
\end_layout

\begin_layout Plain Layout

'__class__',
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

'swapcase',
\end_layout

\begin_layout Plain Layout

'title',
\end_layout

\begin_layout Plain Layout

'translate', 
\end_layout

\begin_layout Plain Layout

'upper',
\end_layout

\begin_layout Plain Layout

'zfill']
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
All is an object
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
In Python all is an 
\series bold
object
\end_layout

\begin_layout Itemize
No 
\emph on
primitive
\emph default
 type: numbers, strings, containers are all 
\series bold
object
\series default
s
\end_layout

\begin_layout Itemize
Also functions, types and modules are 
\series bold
object
\series default
s
\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

>>> def func(): pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>>> type(func)
\end_layout

\begin_layout Plain Layout

function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>>> isinstance(func, object)
\end_layout

\begin_layout Plain Layout

True 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>>> dir(func)
\end_layout

\begin_layout Plain Layout

['__annotations__',
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

>>> type('ciao')
\end_layout

\begin_layout Plain Layout

str
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>>> type(str)
\end_layout

\begin_layout Plain Layout

type
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>>> isinstance(str, object)
\end_layout

\begin_layout Plain Layout

True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>>> dir(str)
\end_layout

\begin_layout Plain Layout

['__add__', ...
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Indentation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Important
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
white spaces are 
\series bold
syntactically significant
\end_layout

\begin_layout Itemize
indentation is used to determine the grouping of statements
\end_layout

\end_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Hint
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
never mix tabs and spaces for indentation
\end_layout

\begin_layout Itemize
always use 4 (four) spaces to indent your code (it is the most widely adopted
 coding convention in the Python ecosystem)
\end_layout

\end_deeper
\begin_layout Block

\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Pretty file size
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def pretty_file_size_str(size):
\end_layout

\begin_layout Plain Layout

    '''String representation of file size
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Get the size in bytes and return the string
\end_layout

\begin_layout Plain Layout

    representation using appropriate units.
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if size >= 2**20:
\end_layout

\begin_layout Plain Layout

        size /= 2**20
\end_layout

\begin_layout Plain Layout

        units = 'MB'
\end_layout

\begin_layout Plain Layout

    elif size >= 2**10:
\end_layout

\begin_layout Plain Layout

        size /= 2**10
\end_layout

\begin_layout Plain Layout

        units = 'KB'
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        units = 'Bytes'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return '%.3f %s' % (size, units)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Let's use our function
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: import os
\end_layout

\begin_layout Plain Layout

In [2]: from prettysize import pretty_file_size_str
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: size = os.path.getsize('somefile.txt')
\end_layout

\begin_layout Plain Layout

In [4]: size
\end_layout

\begin_layout Plain Layout

Out[4]: 20366
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: pretty_file_size_str(size)
\end_layout

\begin_layout Plain Layout

Out[5]: 19.889 KB
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
C++ variables are 
\emph on
Boxes
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.3
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\Large},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int a = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a = 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int b = a;
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.7
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/a1box.png
	height 25theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hspace{}
\length 30col%
\end_inset


\begin_inset Graphics
	filename images/a2box.png
	height 25theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename images/b2box.png
	height 25theight%

\end_inset


\begin_inset Graphics
	filename images/a2box.png
	height 25theight%

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Python variables are 
\emph on
Labels
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.35
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\Large},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [1]: a = 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: a = 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: b = a
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.65
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/a1tag.png
	height 25theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hspace{}
\length 25col%
\end_inset


\begin_inset Graphics
	filename images/a2tag.png
	height 25theight%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename images/ab2tag.png
	height 25theight%

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
indentation
\end_layout

\begin_layout Itemize
introspection
\end_layout

\begin_layout Itemize
all is an object
\end_layout

\begin_layout Itemize
variables
\end_layout

\begin_layout Itemize
how to import a module
\end_layout

\begin_layout Itemize
function definition
\end_layout

\begin_layout Itemize
string formatting
\end_layout

\begin_layout Itemize
docstrings
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
built-ins functions and types:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\series bold
print
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
dir
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
hasattr
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
help
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
len
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
str
\end_layout

\end_deeper
\begin_layout Itemize
keywords and statements
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\series bold
if elif else
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
def
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
return
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
import
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Section
Language Basics
\end_layout

\begin_layout Subsection
Basic types and containers
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Overview
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Immutable types:
\end_layout

\begin_deeper
\begin_layout Itemize
numbers (int, float, complex)
\end_layout

\begin_layout Itemize
strings
\end_layout

\begin_layout Itemize
tuples (heterogeneous sequences)
\end_layout

\begin_layout Itemize
frozensets (immutable version of set)
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
None
\family default
\series default
 (the only value of the type 
\family typewriter
\series bold
NoneType
\family default
\series default
, singleton, it is used to represent the absence of a value) 
\end_layout

\begin_layout Itemize
booleans (
\family typewriter
\series bold
True
\family default
\series default
, 
\family typewriter
\series bold
False
\family default
\series default
)
\end_layout

\end_deeper
\begin_layout Itemize
Mutable types
\end_layout

\begin_deeper
\begin_layout Itemize
lists (heterogeneous sequences)
\end_layout

\begin_layout Itemize
dictionaries or mapping types (associative arrays implemented as hash-maps:
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$
\backslash
mathcal{O}(1)$
\end_layout

\end_inset

  access)
\end_layout

\begin_layout Itemize
sets (unordered collection of heterogeneous object with no duplication)
\end_layout

\begin_layout Itemize
many others ...
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Immutable objects
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Immutable objects are object with a fixed value
\end_layout

\begin_layout Itemize
Such objects cannot be altered
\end_layout

\begin_layout Itemize
A new object has to be created if a different value has to be stored
\end_layout

\begin_layout Itemize
Immutable objects include numbers, strings, tuples, frozensets and 
\family typewriter
\series bold
None
\end_layout

\begin_layout Itemize
They have an important property: they are 
\emph on
hashable
\emph default
 (have a constant hash)
\end_layout

\begin_layout Itemize

\emph on
Hashable
\emph default
 objects can be used as keys in a dictionary (associative arrays implemented
 as hash maps)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Numeric types
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: type(5)
\end_layout

\begin_layout Plain Layout

Out[1]: int
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: type(2.3)    # corresponds to the C double
\end_layout

\begin_layout Plain Layout

Out[2]: float
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: type(1 + 3j)
\end_layout

\begin_layout Plain Layout

Out[3]: complex
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: c = 1 + 3j   # immutable: c.imag = 0 --> ERROR
\end_layout

\begin_layout Plain Layout

In [5]: type(c.real)
\end_layout

\begin_layout Plain Layout

Out[5]: float
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: big = 2**65  # pow(2, 65) does not fit in a C long
\end_layout

\begin_layout Plain Layout

In [7]: type(big), big
\end_layout

\begin_layout Plain Layout

Out[7]: (int, 36893488147419103232)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Numeric casts and conversion
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Casting
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [8]: int(2.1)         # cast
\end_layout

\begin_layout Plain Layout

Out[8]: 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: complex(2)       # cast
\end_layout

\begin_layout Plain Layout

Out[9]: (2+0j)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: float(1)        # cast
\end_layout

\begin_layout Plain Layout

Out[10]: 1.0
\end_layout

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Conversion from string
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [11]: float('1.3e-2')  # conversion from string
\end_layout

\begin_layout Plain Layout

Out[11]: 0.013
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [12]: 2 + 2    # sum
\end_layout

\begin_layout Plain Layout

Out[12]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [13]: 2 - 2    # subtraction
\end_layout

\begin_layout Plain Layout

Out[13]: 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [14]: 3 * 3    # product
\end_layout

\begin_layout Plain Layout

Out[14]: 9
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [15]: 3 ** 2   # pow
\end_layout

\begin_layout Plain Layout

Out[15]: 9
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [16]: n = 1
\end_layout

\begin_layout Plain Layout

In [17]: n *= 2.
  # inplace product
\end_layout

\begin_layout Plain Layout

In [18]: n
\end_layout

\begin_layout Plain Layout

Out[18]: 2.0      # NOTE: type propotion (n = n * 2)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Division operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [19]: 3 / 2    # division
\end_layout

\begin_layout Plain Layout

Out[19]: 1.5      # IMPORTANT: always "true" division
\end_layout

\begin_layout Plain Layout

                  # (always float)
\end_layout

\begin_layout Plain Layout

In [20]: -3.
 // 2 # floor division
\end_layout

\begin_layout Plain Layout

Out[20]: -2.0     # NOTE: type is preserved
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [21]: 3.
 % 2   # reminder
\end_layout

\begin_layout Plain Layout

Out[21]: 1.
       # NOTE: type is preserved
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Important
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
The behavior of the 
\family typewriter
\series bold
/
\family default
\series default
 (division) is changed in Python 3.
\end_layout

\begin_layout AlertBlock
Previously it was not a 
\begin_inset Quotes eld
\end_inset

true division
\begin_inset Quotes erd
\end_inset

 if both operands was integers.
\end_layout

\begin_layout AlertBlock
Please always use:
\end_layout

\begin_layout AlertBlock
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

from __future__ import division
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
to get the 
\emph on
correct
\emph default
 behavior also in Python 2
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Comparison operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [22]: 2 == 2.
\end_layout

\begin_layout Plain Layout

Out[22]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [23]: 3 != 2
\end_layout

\begin_layout Plain Layout

Out[23]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [24]: 3.
 >= 2       # >, <, >=, <=
\end_layout

\begin_layout Plain Layout

Out[24]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [25]: a = 0.5
\end_layout

\begin_layout Plain Layout

In [26]: 0 <= a < 1    # Very nice: a in [0,1[
\end_layout

\begin_layout Plain Layout

Out[26]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [27]: 1j > 2.
\end_layout

\begin_layout Plain Layout

TypeError       Traceback (most recent call last)
\end_layout

\begin_layout Plain Layout

[...]
\end_layout

\begin_layout Plain Layout

TypeError: unorderable types: complex() > int() 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Strings
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
String are 
\series bold
immutable
\series default
 
\series bold
sequences
\series default
 of characters
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline true
status open

\begin_layout Plain Layout

text.replace('
\backslash
t', '    ')
\end_layout

\end_inset

 --> a 
\series bold
new string
\series default
 is created
\end_layout

\end_deeper
\begin_layout Itemize
There are two kind of strings:
\end_layout

\begin_deeper
\begin_layout Itemize
the 
\family typewriter
\series bold
str
\family default
\series default
 type: are strings of 
\family typewriter
\series bold
unicode
\family default
\series default
 characters
\end_layout

\begin_layout Itemize
the 
\family typewriter
\series bold
bytes
\family default
\series default
 type: are string of 8-bit characters
\end_layout

\begin_layout Itemize
conversion between string types requires encoding/decoding
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "language=Python"
inline true
status open

\begin_layout Plain Layout

str.encode('ascii') --> bytes
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Python"
inline true
status open

\begin_layout Plain Layout

bytes.decode('UTF-8') --> str
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Backward incompatible change in Python 3
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
(Python 2) bytes == (Python 3) bytes
\end_layout

\begin_layout Itemize
(Python 2) bytes == (Python 2) str == (Python 3) bytes
\end_layout

\begin_layout Itemize
(Python 2) unicode == (Python 3) str
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
String literals
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: ('ciao' == "ciao") and ('ciao' == u'ciao')
\end_layout

\begin_layout Plain Layout

Out[1]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: type('ciao'), type(b'ciao')    # str vs bytes
\end_layout

\begin_layout Plain Layout

Out[2]: (str, bytes) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: r'Hello,
\backslash
nWorld!'    # raw strings
\end_layout

\begin_layout Plain Layout

Out[3]: 'Hello,
\backslash

\backslash
nWorld!' 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: s = '''Hello,
\end_layout

\begin_layout Plain Layout

World!'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: s    # --> repr(s)
\end_layout

\begin_layout Plain Layout

Out[5]: 'Hello,
\backslash
nWorld!'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: print(s)
\end_layout

\begin_layout Plain Layout

Hello,
\end_layout

\begin_layout Plain Layout

World!
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Main string methods
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.25
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color blue
isalnum
\end_layout

\begin_layout Itemize

\color blue
isalpha
\end_layout

\begin_layout Itemize

\color blue
isdecimal
\end_layout

\begin_layout Itemize

\color blue
isdigit
\end_layout

\begin_layout Itemize

\color blue
isidentifier
\end_layout

\begin_layout Itemize

\color blue
islower
\end_layout

\begin_layout Itemize

\color blue
isnumeric
\end_layout

\begin_layout Itemize

\color blue
isprintable
\end_layout

\begin_layout Itemize

\color blue
isspace
\end_layout

\begin_layout Itemize

\color blue
istitle
\end_layout

\begin_layout Itemize

\color blue
isupper
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.25
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color blue
startswith
\end_layout

\begin_layout Itemize

\color blue
endswith
\end_layout

\begin_layout Itemize
join
\end_layout

\begin_layout Itemize
split
\end_layout

\begin_layout Itemize
rsplit
\end_layout

\begin_layout Itemize
splitlines
\end_layout

\begin_layout Itemize
strip
\end_layout

\begin_layout Itemize
lstrip
\end_layout

\begin_layout Itemize
rstrip
\end_layout

\begin_layout Itemize
partition
\end_layout

\begin_layout Itemize
rpartition
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.25
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color magenta
lower
\end_layout

\begin_layout Itemize

\color magenta
upper
\end_layout

\begin_layout Itemize

\color magenta
capitalize
\end_layout

\begin_layout Itemize

\color magenta
casefold
\end_layout

\begin_layout Itemize

\color magenta
title
\end_layout

\begin_layout Itemize

\color magenta
swapcase
\end_layout

\begin_layout Itemize

\color red
center
\end_layout

\begin_layout Itemize

\color red
ljust
\end_layout

\begin_layout Itemize

\color red
rjust
\end_layout

\begin_layout Itemize

\color red
zfill
\end_layout

\begin_layout Itemize

\color red
expandtabs
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.25
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color cyan
count
\end_layout

\begin_layout Itemize

\color cyan
find
\end_layout

\begin_layout Itemize

\color cyan
rfind
\end_layout

\begin_layout Itemize

\color cyan
replace
\end_layout

\begin_layout Itemize

\color cyan
translate
\end_layout

\begin_layout Itemize

\color cyan
index
\end_layout

\begin_layout Itemize

\color cyan
rindex
\end_layout

\begin_layout Itemize

\color green
format
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other string tools
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: len('ciao')
\end_layout

\begin_layout Plain Layout

Out[2]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: 'World' in 'Hello, World!'
\end_layout

\begin_layout Plain Layout

Out[2]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: 'Hello, ' + 'World!'
\end_layout

\begin_layout Plain Layout

Out[3]: 'Hello, World!'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: 'ciao' * 2
\end_layout

\begin_layout Plain Layout

Out[4]: 'ciaociao'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: 'aaa' < 'bbb'
\end_layout

\begin_layout Plain Layout

Out[5]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: bool(''), bool('a')
\end_layout

\begin_layout Plain Layout

Out[6]: False, True
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Indexing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\scriptsize},tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [7]: s = 'abcdefghijklmnopqrstuvwxyz'
\end_layout

\begin_layout Plain Layout

In [8]: s[2]             # zero based indexing
\end_layout

\begin_layout Plain Layout

Out[8]: 'c'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: s[0:2]           # start included, stop excluded
\end_layout

\begin_layout Plain Layout

Out[9]: 'ab'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: s[:13], s[13:]  # no overlap & start/stop omitted
\end_layout

\begin_layout Plain Layout

Out[10]: ('abcdefghijklm', 'nopqrstuvwxyz')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [11]: s[-1]           # negative indices are OK
\end_layout

\begin_layout Plain Layout

Out[11]: 'z'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: s[1:20:3]       # start:stop:step
\end_layout

\begin_layout Plain Layout

Out[12]: 'behknqt' 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: s[::-1]         # negative step is OK --> revese seq.
\end_layout

\begin_layout Plain Layout

Out[12]: 'zyxwvutsrqponmlkjihgfedcba'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [13]: s[:]            # all elements
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Printf-style string formatting
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: print('Hello, %s!' % 'World')	# %s --> str
\end_layout

\begin_layout Plain Layout

Hello, World!
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: print('%d / %d = %.2f' % (1, 3, 1/3))
\end_layout

\begin_layout Plain Layout

1 / 3 = 0.33 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: print('"%+10.2f"' % (1/3))
\end_layout

\begin_layout Plain Layout

"     +0.33"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: mapping = {'name': 'Python', 'version': 3}
\end_layout

\begin_layout Plain Layout

In [5]: print('%(name)s v%(version)d' % mapping)
\end_layout

\begin_layout Plain Layout

Python v3
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
References
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://docs.python.org/3/library/stdtypes.html
\backslash
#printf-style-string-formatting
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
String formatting with 
\emph on
.format()
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: print('Hello, {}!'.format('World'))
\end_layout

\begin_layout Plain Layout

Hello, World!
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: print('{} / {} = {:.2f}'.format(1, 3, 1/3))
\end_layout

\begin_layout Plain Layout

1 / 3 = 0.33 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: print('{name} v{version:d}'.format(
\end_layout

\begin_layout Plain Layout

   ...: name='Python', version=3))
\end_layout

\begin_layout Plain Layout

Python v3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: print('{1}{0}{0}'.format('+', 'C'))
\end_layout

\begin_layout Plain Layout

C++
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
References
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://docs.python.org/3/library/string.html
\backslash
#format-string-syntax
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
String anti-pattern
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Bad
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: notes = ('do', 're', 'mi')
\end_layout

\begin_layout Plain Layout

In [2]: solfege = notes[0]
\end_layout

\begin_layout Plain Layout

   ...: for note in notes[1:]:
\end_layout

\begin_layout Plain Layout

   ...:     solfege += ', ' + note
\end_layout

\begin_layout Plain Layout

In [3]: solfege
\end_layout

\begin_layout Plain Layout

Out[3]: 'do, re, mi'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Good
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: notes = ('do', 're', 'mi')
\end_layout

\begin_layout Plain Layout

In [2]: solfege = ', '.join(notes)
\end_layout

\begin_layout Plain Layout

In [3]: solfege
\end_layout

\begin_layout Plain Layout

Out[3]: 'do, re, mi'
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
tuple
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Tuples are 
\series bold
immutable sequences
\series default
 of zero or more elements
\end_layout

\begin_layout Itemize
You can consider tuples as 
\series bold
heterogeneous
\series default
 containers (can store elements of different type)
\end_layout

\begin_layout Itemize
A tuple consists of a number of values separated by commas
\end_layout

\begin_layout Itemize
Parentheses are used for correct interpretation and nesting
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
tuple literals
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: t = 'a', 'b', 3
\end_layout

\begin_layout Plain Layout

In [2]: t = ('a', 'b', 3)
\end_layout

\begin_layout Plain Layout

In [3]: t = ()                  # empty tuple
\end_layout

\begin_layout Plain Layout

In [4]: t = ('aa',)             # one element tuple
\end_layout

\begin_layout Plain Layout

                                # note the final comma
\end_layout

\begin_layout Plain Layout

In [5]: t = ('a', (1, 2), 'b')  # nesting
\end_layout

\begin_layout Plain Layout

In [6]: t[1]
\end_layout

\begin_layout Plain Layout

Out[6]: (1, 2)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
tuple
\family default
 
\series default
constructor
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [7]: t = tuple(('a', 'b', 3))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [8]: t = tuple(t)                # tuple(sequence)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: t = tuple(['a','b', 3])     # tuple(sequence)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: t = tuple()                # empty
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [11]: t = tuple((2,))            # one element
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: tuple('ciao')              # tuple(sequence)
\end_layout

\begin_layout Plain Layout

Out[12]: ('c', 'i', 'a', 'o')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [13]: t = ('ciao',)              # tuple(sequence)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
tuple
\family default
\series default
 methods
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
index
\end_layout

\begin_layout Itemize
count
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Examples
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [14]: t = ('a', 'b', 'b', 'c')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [15]: t.index('c')
\end_layout

\begin_layout Plain Layout

Out[15]: 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [16]: t.count('b')
\end_layout

\begin_layout Plain Layout

Out[16]: 2
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other 
\family typewriter
\series bold
tuple
\family default
\series default
 tools (1/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [17]: (1, 2) + ('x', 'y')        # concatenation
\end_layout

\begin_layout Plain Layout

Out[17]: (1, 2, 'x', 'y')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [18]: len(t)
\end_layout

\begin_layout Plain Layout

Out[18]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [19]: 2 in t                     # contains
\end_layout

\begin_layout Plain Layout

Our[19]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [20]: t[1]                       # indexing
\end_layout

\begin_layout Plain Layout

Out[20]: 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [21]: t[1:3]                     # slicing
\end_layout

\begin_layout Plain Layout

Out[21]: (2, 'x')                   # output is a tuple
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other 
\family typewriter
\series bold
tuple
\family default
\series default
 tools (2/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [22]: t
\end_layout

\begin_layout Plain Layout

Out[22]: (1, 2, 'x', 'y')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [23]: a, b, c, d = t             # unpacking
\end_layout

\begin_layout Plain Layout

In [24]: a
\end_layout

\begin_layout Plain Layout

Out[24]: 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [25]: bool(t)
\end_layout

\begin_layout Plain Layout

Out[25]: Ture
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [26]: bool(empty_tuple)
\end_layout

\begin_layout Plain Layout

Out[26]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [27]: ('a', 2) < ('a', 0)        # lexicographical
\end_layout

\begin_layout Plain Layout

Out[27]: False
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
list
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Lists are 
\series bold
mutable sequences
\series default
 of zero or more elements
\end_layout

\begin_layout Itemize
Lists are 
\series bold
heterogeneous
\series default
 containers (can store elements of different type)
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
list literals
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: L = ['a', 'b', 3]
\end_layout

\begin_layout Plain Layout

In [2]: L = []                  # empty list
\end_layout

\begin_layout Plain Layout

In [3]: L = ['aa']              # one element list
\end_layout

\begin_layout Plain Layout

                                # no final comma here!
\end_layout

\begin_layout Plain Layout

In [4]: L = ['a', [1, 2], 'b']  # nesting
\end_layout

\begin_layout Plain Layout

In [5]: L[1]
\end_layout

\begin_layout Plain Layout

Out[5]: [1, 2]
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
list
\family default
 
\series default
constructor
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [6]: L = list(['a', 'b', 3])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [7]: L = list(L)                # list(sequence)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [8]: L = list(['a','b', 3])     # list(sequence)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: L = list()                 # empty
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: L = list([2])             # one element
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [11]: list('ciao')              # list(sequence)
\end_layout

\begin_layout Plain Layout

Out[11]: ['c', 'i', 'a', 'o']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: L = ['ciao']              # list(sequence)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
list
\family default
\series default
 methods
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
index (like tuples)
\end_layout

\begin_layout Itemize
count (like tuples)
\end_layout

\begin_layout Itemize
copy
\end_layout

\begin_layout Itemize

\color magenta
sort
\end_layout

\begin_layout Itemize

\color magenta
reverse
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color blue
append
\end_layout

\begin_layout Itemize

\color blue
extend
\end_layout

\begin_layout Itemize

\color blue
insert
\end_layout

\begin_layout Itemize

\color red
pop
\end_layout

\begin_layout Itemize

\color red
clear
\end_layout

\begin_layout Itemize

\color red
remove
\end_layout

\end_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Note
\end_layout

\end_inset


\end_layout

\begin_layout Block
With the only exception of 
\family typewriter
\series bold
list.pop
\family default
\series default
, all methods that change a 
\family typewriter
\series bold
list
\family default
\series default
 in-place return 
\family typewriter
\series bold
None
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
list
\family default
\series default
 method examples
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: L = ['a', 'b']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: L.append(3)
\end_layout

\begin_layout Plain Layout

In [3]: L
\end_layout

\begin_layout Plain Layout

Out[3]: ['a', 'b', 3]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: L.insert(1, (1, 2))
\end_layout

\begin_layout Plain Layout

In [5]: L
\end_layout

\begin_layout Plain Layout

Out[5]: ['a', (1, 2), 'b', 3]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: L.pop()
\end_layout

\begin_layout Plain Layout

Out[6]: 3
\end_layout

\begin_layout Plain Layout

In [7]: L
\end_layout

\begin_layout Plain Layout

Out[7]: ['a', (1, 2), 'b', 3]
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [8]: L.pop(1)
\end_layout

\begin_layout Plain Layout

Out[8]: (1, 2)
\end_layout

\begin_layout Plain Layout

In [9]: L
\end_layout

\begin_layout Plain Layout

Out[9]: ['a', 'b']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: L.extend([1, 2])
\end_layout

\begin_layout Plain Layout

In [11]: L
\end_layout

\begin_layout Plain Layout

Out[11]: ['a', 'b', 1, 2]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: L.remove('b')
\end_layout

\begin_layout Plain Layout

In [13]: L
\end_layout

\begin_layout Plain Layout

Out[13]: ['a', 1, 2]
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other 
\family typewriter
\series bold
list
\family default
\series default
 tools (1/3)
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [14]: [1, 2] + ['x', 'y']  # concatenation
\end_layout

\begin_layout Plain Layout

Out[14]: [1, 2, 'x', 'y']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [15]: [1, 2] + ('x', 'y')
\end_layout

\begin_layout Plain Layout

TypeError: can only concatenate list (not "tuple") to list 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [16]: len(L)
\end_layout

\begin_layout Plain Layout

Out[16]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [17]: 2 in L               # contains
\end_layout

\begin_layout Plain Layout

Our[17]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [18]: L[1]                 # indexing
\end_layout

\begin_layout Plain Layout

Out[18]: 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [19]: L[1:3]               # slicing
\end_layout

\begin_layout Plain Layout

Out[19]: (2, 'x')             # output is a tuple
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other 
\family typewriter
\series bold
list
\family default
\series default
 tools (2/3)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [20]: a, b, c, d = [1, 2, 'x', 'y']  # unpacking
\end_layout

\begin_layout Plain Layout

In [21]: b
\end_layout

\begin_layout Plain Layout

Out[21]: 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [22]: L = [1, 2, 'x', 'y']
\end_layout

\begin_layout Plain Layout

In [23]: del L[1]
\end_layout

\begin_layout Plain Layout

In [24]: L
\end_layout

\begin_layout Plain Layout

Out[24]: [1, 'x', 'y']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [25]: L = [1, 2, 'x', 'y']
\end_layout

\begin_layout Plain Layout

In [26]: del L[1:3]
\end_layout

\begin_layout Plain Layout

In [27]: L
\end_layout

\begin_layout Plain Layout

Out[27]: [1, 'y']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [26]: L = [1, 2, 'x', 'y']
\end_layout

\begin_layout Plain Layout

In [27]: del L[:]             # equivalent to L.clear()
\end_layout

\begin_layout Plain Layout

In [28]: L
\end_layout

\begin_layout Plain Layout

Out[28]: []
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other 
\family typewriter
\series bold
list
\family default
\series default
 tools (3/3)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [28]: bool(L)
\end_layout

\begin_layout Plain Layout

Out[28]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [29]: bool([])
\end_layout

\begin_layout Plain Layout

Out[29]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [27]: ['a', 2] < ['a', 0]        # lexicographical
\end_layout

\begin_layout Plain Layout

Out[27]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [28]: (1, 2) == [1, 2]           # different types
\end_layout

\begin_layout Plain Layout

Out[28]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [29]: (1, 2) == tuple([1, 2])
\end_layout

\begin_layout Plain Layout

Out[29]: True
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
dict
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Dictionaries (
\family typewriter
\series bold
dict
\family default
\series default
) are associative array (mapping types)
\end_layout

\begin_layout Itemize
Dictionaries are 
\series bold
heterogeneous
\series default
 containers (can store elements of different type)
\end_layout

\begin_layout Itemize
Unordered (but exists the 
\family typewriter
\series bold
collections.OrderedDict
\family default
\series default
 type)
\end_layout

\begin_layout Itemize
...
 and randomized (can't rely on the key order)
\end_layout

\begin_layout Itemize
Implemented as hash-maps
\end_layout

\begin_deeper
\begin_layout Itemize
Unique keys
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$
\backslash
mathcal{O}(1)$
\end_layout

\end_inset

 access
\end_layout

\end_deeper
\begin_layout Itemize
Keys must be 
\emph on
hashable
\end_layout

\begin_deeper
\begin_layout Itemize
immutable types are usually OK (numbers, strings, etc.)
\end_layout

\begin_layout Itemize
tuples or frozensets must only contain immutable object
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
dict
\family default
 
\series default
constructors and literals
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: d = {'a': 1, 'b': 2, 3: 'ciao'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: d = {}    # empty dict
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: d = dict(a=1, b=2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: # dict(sequence of pairs)
\end_layout

\begin_layout Plain Layout

In [5]: d = dict([('a', 1), ('b', 2), (3, 'ciao')])
\end_layout

\begin_layout Plain Layout

Out[5]: {3: 'ciao', 'b': 2, 'a': 1}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: dict.fromkeys(['a','b', 3])
\end_layout

\begin_layout Plain Layout

Out[6]: {3: None, 'b': None, 'a': None}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [7]: dict.fromkeys(['a','b', 3], 'zero')
\end_layout

\begin_layout Plain Layout

Out[7]: {3: 'zero', 'b': 'zero', 'a': 'zero'}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
dict
\family default
\series default
 indexing (1/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: d = {'a': 1, 'b': 2}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: d['b']
\end_layout

\begin_layout Plain Layout

Out[2]: 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: d['unexinsing key']
\end_layout

\begin_layout Plain Layout

KeyError: 'unexinsing key'	
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: print(d.get('unexinsing key'))
\end_layout

\begin_layout Plain Layout

None
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: d[list()] = [1, 2, 3]
\end_layout

\begin_layout Plain Layout

TypeError: unhashable type: 'list' 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
dict
\family default
\series default
 indexing (2/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [6]: d['new key'] = [1, 2, 3]
\end_layout

\begin_layout Plain Layout

In [7]: d
\end_layout

\begin_layout Plain Layout

Out[7]: {'b': 2, 'a': 1, 'new key': [1, 2, 3]} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [8]: d['new key'] = None    # repalces existing value
\end_layout

\begin_layout Plain Layout

In [9]: d
\end_layout

\begin_layout Plain Layout

Out[9]: {'b': 2, 'a': 1, 'new key': None} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: del d['new key']
\end_layout

\begin_layout Plain Layout

In [11]: d
\end_layout

\begin_layout Plain Layout

Out[11]: {'b': 2, 'a': 1}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
dict
\family default
\series default
 methods
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Python 3
\end_layout

\begin_layout Itemize
keys (--> iterator)
\end_layout

\begin_layout Itemize
values (--> iterator)
\end_layout

\begin_layout Itemize
items (--> iterator)
\end_layout

\begin_layout Standard
Python 2
\end_layout

\begin_layout Itemize
keys (--> list)
\end_layout

\begin_layout Itemize
values (--> list)
\end_layout

\begin_layout Itemize
items (--> list)
\end_layout

\begin_layout Itemize
iterkeys (--> iterator)
\end_layout

\begin_layout Itemize
itervalues (--> iterator)
\end_layout

\begin_layout Itemize
iteritems (--> iterator)
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
fromkeys (static method)
\end_layout

\begin_layout Itemize
copy
\end_layout

\begin_layout Itemize
get
\end_layout

\begin_layout Itemize

\color red
update
\end_layout

\begin_layout Itemize

\color red
setdefault
\end_layout

\begin_layout Itemize

\color red
pop
\end_layout

\begin_layout Itemize

\color red
popitem
\end_layout

\begin_layout Itemize

\color red
clear
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
dict
\family default
\series default
 method examples (1/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: d = {'a': 1, 'b': 2}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: list(d.keys())
\end_layout

\begin_layout Plain Layout

Out[2]: ['b', 'a']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: list(d.values())
\end_layout

\begin_layout Plain Layout

Out[3]: [2, 1]                # match the order of keys
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: list(d.items())
\end_layout

\begin_layout Plain Layout

Out[4]: [('b', 2), ('a', 1)]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: for k, v in d.items():
\end_layout

\begin_layout Plain Layout

   ...:     print('key={!r}, value={!r}'.format(k, v))
\end_layout

\begin_layout Plain Layout

key='b', value=2
\end_layout

\begin_layout Plain Layout

key='a', value=1
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
dict
\family default
\series default
 method examples (2/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [6]: d.update({'aa': 11, 'bb': 22})    # --> None
\end_layout

\begin_layout Plain Layout

In [7]: d
\end_layout

\begin_layout Plain Layout

Out[7]: {'b': 2, 'a': 1, 'bb': 22, 'aa': 11}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# if key not in d:
\end_layout

\begin_layout Plain Layout

#     d[key] = default
\end_layout

\begin_layout Plain Layout

# return d[key]
\end_layout

\begin_layout Plain Layout

In [8]: d.setdefault('new key', 'default value')
\end_layout

\begin_layout Plain Layout

Out[8]: 'default value'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: d.pop('new key')
\end_layout

\begin_layout Plain Layout

Out[9]: 'default value'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: d.popitem()
\end_layout

\begin_layout Plain Layout

Out[10]: ('b', 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [11]: d
\end_layout

\begin_layout Plain Layout

Out[11]: {'a': 1, 'bb': 22, 'aa': 11}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other 
\family typewriter
\series bold
dict
\family default
\series default
 tools
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [12]: len(d)    # d = {'a': 1, 'bb': 22, 'aa': 11}
\end_layout

\begin_layout Plain Layout

Out[12]: 3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [13]: 'a' in d                     # contains
\end_layout

\begin_layout Plain Layout

Our[13]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [14]: 'a' not in d                 # contains
\end_layout

\begin_layout Plain Layout

Our[14]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [15]: bool(d)
\end_layout

\begin_layout Plain Layout

Out[15]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [16]: bool({})
\end_layout

\begin_layout Plain Layout

Out[16]: False
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
set
\family default
\series default
 (and 
\family typewriter
\series bold
frozenset
\family default
\series default
)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A 
\family typewriter
\series bold
set
\family default
\series default
 is an unordered collection with no duplicate elements
\end_layout

\begin_layout Itemize
Sets are 
\series bold
heterogeneous
\series default
 containers (can store elements of different type)
\end_layout

\begin_layout Itemize
Elements must be 
\emph on
hashable
\end_layout

\begin_deeper
\begin_layout Itemize
immutable types are usually OK (numbers, strings, etc.)
\end_layout

\begin_layout Itemize
tuples or frozensets must only contain immutable object
\end_layout

\end_deeper
\begin_layout Itemize
A 
\family typewriter
\series bold
frozenset
\family default
\series default
 is the immutable version of a 
\family typewriter
\series bold
set
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
set
\family default
 
\series default
constructors and literals
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: s = {'a', 'b', 2, 3}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: type({})                   # WARNING: empty dict
\end_layout

\begin_layout Plain Layout

Out[2]: dict
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: s = set()                  # empty set
\end_layout

\begin_layout Plain Layout

In [4]: s = set(['a', 'b', 2, 3])  # set(sequence)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: set(['a', 'b', (2, 3)])    # tuple element
\end_layout

\begin_layout Plain Layout

Out[5]: {'b', 'a', (2, 3)}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: set('ciao')                # set(sequence)
\end_layout

\begin_layout Plain Layout

Out[6]: {'a', 'c', 'i', 'o'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: set(['ciao'])              # one str element
\end_layout

\begin_layout Plain Layout

Out[6]: {'ciao'}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
set
\family default
\series default
 tools
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: vowels = set('aeiou')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: len(vowels)
\end_layout

\begin_layout Plain Layout

Out[2]: 5
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: 'b' in vowels      # contains
\end_layout

\begin_layout Plain Layout

Out[3]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: 'b' not in vowels  # not contains
\end_layout

\begin_layout Plain Layout

Our[4]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: bool(s), bool(set())
\end_layout

\begin_layout Plain Layout

Out[5]: (True, False)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: for item in set(['item1', 'item2']):
\end_layout

\begin_layout Plain Layout

   ...:     do_something(item)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
set
\family default
\series default
 comparison (1/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [7]: vowels == {'a', 'e', 'i', 'o', 'u'}
\end_layout

\begin_layout Plain Layout

Out[7]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [8]: vowels != {'a', 'e', 'i', 'o', 'u'}
\end_layout

\begin_layout Plain Layout

Out[8]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: vowels <= set(ascii_lowercase) # set.issubset
\end_layout

\begin_layout Plain Layout

Out[9]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: vowels < {'a', 'e', 'i', 'o', 'u'}
\end_layout

\begin_layout Plain Layout

Out[10]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [11]: vowels >= set(['a', 'e'])     # set.issuperset
\end_layout

\begin_layout Plain Layout

Out[11]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: {'a', 'e', 'i', 'o', 'u', 'x'} > vowels
\end_layout

\begin_layout Plain Layout

Out[12]: True
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
set
\family default
\series default
 comparison (2/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [13]: vowels | set([1, 2])   # set.union
\end_layout

\begin_layout Plain Layout

Our[13]: {'o', 'a', 1, 2, 'e', 'u', 'i'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [14]: vowels & set('abc')    # set.intersection
\end_layout

\begin_layout Plain Layout

Out[14]: {'a'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [15]: vowels - set('abc')    # set.difference
\end_layout

\begin_layout Plain Layout

Out[15]: {'e', 'i', 'o', 'u'} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [16]: vowels ^ set('abc')    # set.symmetric_difference
\end_layout

\begin_layout Plain Layout

Out[16]: {'b', 'c', 'e', 'i', 'o', 'u'}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
set
\family default
\series default
 methods
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Both 
\family typewriter
\series bold
set
\family default
\series default
 and 
\family typewriter
\series bold
frozenset
\end_layout

\begin_layout Itemize
copy
\end_layout

\begin_layout Itemize
difference
\end_layout

\begin_layout Itemize
intersection
\end_layout

\begin_layout Itemize
symmetric_difference
\end_layout

\begin_layout Itemize
union
\end_layout

\begin_layout Itemize
isdisjoint
\end_layout

\begin_layout Itemize
issubset
\end_layout

\begin_layout Itemize
issuperset
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.65
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Modifier methods (
\family typewriter
\series bold
set
\family default
\series default
 only)
\end_layout

\begin_layout Itemize
add
\end_layout

\begin_layout Itemize
update (like 
\family typewriter
\series bold
dict
\family default
\series default
)
\end_layout

\begin_layout Itemize
clear
\end_layout

\begin_layout Itemize
discard
\end_layout

\begin_layout Itemize
pop
\end_layout

\begin_layout Itemize
remove
\end_layout

\begin_layout Itemize
intersection_update
\end_layout

\begin_layout Itemize
difference_update
\end_layout

\begin_layout Itemize
symmetric_difference_update
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
set
\family default
\series default
 method examples (1/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: vowels.issubset(ascii_lowercase)         # <=
\end_layout

\begin_layout Plain Layout

Out[1]: True
\end_layout

\begin_layout Plain Layout

In [2]: vowels.issuperset(['a', 'u'])            # >=
\end_layout

\begin_layout Plain Layout

Out[2]: True
\end_layout

\begin_layout Plain Layout

In [3]: vowels.isdisjoint('cd')
\end_layout

\begin_layout Plain Layout

Out[3]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: vowels.union([1, 2])                     # |
\end_layout

\begin_layout Plain Layout

Out[4]: {'o', 'a', 1, 2, 'u', 'e', 'i'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: vowels.difference(['a', 'u'])            # -
\end_layout

\begin_layout Plain Layout

Out[5]: {'e', 'i', 'o'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: vowels.symmetric_difference(['a', 'b'])  # ^
\end_layout

\begin_layout Plain Layout

Out[6]: {'b', 'e', 'i', 'o', 'u'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [7]: vowels.intersection('abcde')             # &
\end_layout

\begin_layout Plain Layout

Out[7]: {'a', 'e'}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
set
\family default
\series default
 method examples (2/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [8]: s = set()
\end_layout

\begin_layout Plain Layout

In [9]: s.update(vowels)       # add multiple elements
\end_layout

\begin_layout Plain Layout

In [10]: s
\end_layout

\begin_layout Plain Layout

Out[10]: {'a', 'e', 'i', 'o', 'u'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [11]: s.add('ciao')         # add one elements
\end_layout

\begin_layout Plain Layout

In [12]: s
\end_layout

\begin_layout Plain Layout

Out[12]: {'a', 'ciao', 'e', 'i', 'o', 'u'} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [13]: s.remove('invalid')   # one element
\end_layout

\begin_layout Plain Layout

KeyError: 'invalid'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [14]: s.discard('invalid')  # no error
\end_layout

\begin_layout Plain Layout

In [15]: s
\end_layout

\begin_layout Plain Layout

Out[15]: {'a', 'ciao', 'e', 'i', 'o', 'u'} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [16]: s.pop() # remove and return an arbitrary element
\end_layout

\begin_layout Plain Layout

Out[16]: 'o'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other useful containers
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The 
\family typewriter
\series bold
collections
\family default
\series default
 module provides a useful set of containers, e.g.:
\end_layout

\end_deeper
\begin_layout FragileFrame
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
namedtuple 
\emph on
factory function
\emph default
 for creating tuple subclasses with named fields
\end_layout

\begin_layout Description
deque list-like container with fast appends and pops on either end
\end_layout

\begin_layout Description
OrderedDict dict subclass that remembers the order entries were added
\end_layout

\begin_layout Description
defaultdict dict subclass that calls a factory function to supply missing
 values
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
How to get 
\family typewriter
\series bold
collections
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: import collections    # or e.g.
\end_layout

\begin_layout Plain Layout

In [2]: from collections import namedtuple
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mutable vs immutable object
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: s1 = 'Hello, World'
\end_layout

\begin_layout Plain Layout

In [2]: s2 = s1   # assignment: bind a name to an object
\end_layout

\begin_layout Plain Layout

In [3]: s1 is s2  # identity
\end_layout

\begin_layout Plain Layout

Out[3]: True      # s1 and s2 are labels for the same obj
\end_layout

\begin_layout Plain Layout

In [4]: s1 += '!' # the obj bound to s1 can't be modified
\end_layout

\begin_layout Plain Layout

                  # --> rebinding: s1 = str(s1 + '!')
\end_layout

\begin_layout Plain Layout

In [5]: s1 is s2
\end_layout

\begin_layout Plain Layout

Out[5]: False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: d1 = {}   # mutable
\end_layout

\begin_layout Plain Layout

In [5]: d2 = d1
\end_layout

\begin_layout Plain Layout

In [6]: d2['key'] = 'value'
\end_layout

\begin_layout Plain Layout

In [7]: d1
\end_layout

\begin_layout Plain Layout

{'key': 'value'}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [7]: d1 is d2  # d1 and d2 are still bound
\end_layout

\begin_layout Plain Layout

Out[4]: True      # the same object
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
x Comprehensions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
I=\left\{ f\left(x\right),x\in A\right\} 
\]

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: A = set([1, 2, 3, 4, 5])
\end_layout

\begin_layout Plain Layout

In [2]: I = {x**2 for x in A}    # set comprehension
\end_layout

\begin_layout Plain Layout

In [3]: I
\end_layout

\begin_layout Plain Layout

Out[3]: {1, 4, 9, 16, 25}
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [4]: I_odd = {x**2 for x in A if x % 2 != 0}
\end_layout

\begin_layout Plain Layout

In [5]: I_odd
\end_layout

\begin_layout Plain Layout

Out[5]: {1, 9, 25}
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [6]: L = [x**2 for x in A]    # list comprehension
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [7]: D = {x: x**2 for x in A} # dict comprehension
\end_layout

\begin_layout Plain Layout

Out[7]: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Generator expressions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [8]: G = (x**2 for x in A)    # it is not a tuple!
\end_layout

\begin_layout Plain Layout

In [9]: type(G)                  # a tuple is defined 
\end_layout

\begin_layout Plain Layout

Out[9]: generator                # by commas
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: hasattr(G, '__next__')
\end_layout

\begin_layout Plain Layout

Out[10]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [11]: for item in G:
\end_layout

\begin_layout Plain Layout

    ...:     do_something(item)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: T = tuple(x**2 for x in A)
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
What is a generator?
\end_layout

\end_inset


\end_layout

\begin_layout Block
A generator (iterator) is a iterable object that generates values dynamically
 when the 
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline true
status open

\begin_layout Plain Layout

next(G)
\end_layout

\end_inset

 function is called on it
\end_layout

\end_deeper
\begin_layout Subsection
Flow control and exception handling
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
If elif else
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

if expr:
\end_layout

\begin_layout Plain Layout

    pass
\end_layout

\begin_layout Plain Layout

elif expr:
\end_layout

\begin_layout Plain Layout

    pass
\end_layout

\begin_layout Plain Layout

elif ...:
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

    pass
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\series bold
if
\family default
\series default
 followed by a boolean expression and 
\begin_inset Quotes eld
\end_inset


\family typewriter
\series bold
:
\family default
\series default

\begin_inset Quotes erd
\end_inset

 (colon)
\end_layout

\begin_layout Itemize
multiple (optional) 
\family typewriter
\series bold
elif
\family default
\series default
 clauses followed by a boolean expression and 
\begin_inset Quotes eld
\end_inset


\family typewriter
\series bold
:
\family default
\series default

\begin_inset Quotes erd
\end_inset

 (colon)
\end_layout

\begin_layout Itemize
(optional) 
\family typewriter
\series bold
else
\family default
\series default
 clause followed by 
\begin_inset Quotes eld
\end_inset


\family typewriter
\series bold
:
\family default
\series default

\begin_inset Quotes erd
\end_inset

 (colon)
\end_layout

\end_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Note
\end_layout

\end_inset


\end_layout

\begin_layout Block
The 
\family typewriter
\series bold
pass
\family default
\series default
 keyword can be used a a placeholder where a code block is expected
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
No switch statement
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.4
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Use 
\family typewriter
\series bold
if elif else
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

if key == 'a':
\end_layout

\begin_layout Plain Layout

    do_stuff_for_a()
\end_layout

\begin_layout Plain Layout

elif key == 'b':
\end_layout

\begin_layout Plain Layout

    do_stuff_for_b()
\end_layout

\begin_layout Plain Layout

elif key == 'c':
\end_layout

\begin_layout Plain Layout

    do_stuff_for_c()
\end_layout

\begin_layout Plain Layout

elif ...:
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

    do_default_stuff()
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.6
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
...
 or a mapping
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

mapping = {
\end_layout

\begin_layout Plain Layout

    'a': do_stuff_for_a,
\end_layout

\begin_layout Plain Layout

	'b': do_stuff_for_b,
\end_layout

\begin_layout Plain Layout

	'c': do_stuff_for_c,
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

# if key not in mapping
\end_layout

\begin_layout Plain Layout

# select do_default_stuff
\end_layout

\begin_layout Plain Layout

func = mapping.get(
\end_layout

\begin_layout Plain Layout

    key, do_default_stuff)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# call the correct fnction
\end_layout

\begin_layout Plain Layout

func()
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
for
\family default
\series default
 loop
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.57
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\family typewriter
\series bold
for
\family default
\series default
 loop example
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

# simple loop
\end_layout

\begin_layout Plain Layout

for item in sequence:
\end_layout

\begin_layout Plain Layout

    do_stuff_with(item)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# complete example
\end_layout

\begin_layout Plain Layout

for item in sequence:
\end_layout

\begin_layout Plain Layout

    if not is_ok(item):
\end_layout

\begin_layout Plain Layout

        continue
\end_layout

\begin_layout Plain Layout

    elif should_we_break(item):
\end_layout

\begin_layout Plain Layout

        break
\end_layout

\begin_layout Plain Layout

    do_stuff_with(item)
\end_layout

\begin_layout Plain Layout

else:  # no break
\end_layout

\begin_layout Plain Layout

    do_some_other_stuff()
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.43
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\series bold
for
\family default
\series default
 and 
\family typewriter
\series bold
in
\family default
\series default
 keywords followed by a 
\begin_inset Quotes eld
\end_inset


\family typewriter
\series bold
:
\family default
\series default

\begin_inset Quotes erd
\end_inset

 (colon)
\end_layout

\begin_layout Itemize
...
 followed by a 
\emph on
code block
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
break
\family default
\series default
 and 
\family typewriter
\series bold
continue
\family default
\series default
 are allowed in loops
\end_layout

\begin_layout Itemize
the (optional) 
\family typewriter
\series bold
else
\family default
\series default
 clause if the loop ends regularly (no 
\family typewriter
\series bold
break
\family default
\series default
)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
while
\family default
\series default
 loop
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.57
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\family typewriter
\series bold
while
\family default
\series default
 loop example
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

while condition:
\end_layout

\begin_layout Plain Layout

    do_stuff()
\end_layout

\begin_layout Plain Layout

    if some_special_case:
\end_layout

\begin_layout Plain Layout

        continue
\end_layout

\begin_layout Plain Layout

    elif some_other_specia_case:
\end_layout

\begin_layout Plain Layout

        break
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

    # no break
\end_layout

\begin_layout Plain Layout

    do_some_other_stuff()
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.43
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\series bold
while
\family default
\series default
 keyword followed by a boolean expression and 
\begin_inset Quotes eld
\end_inset


\family typewriter
\series bold
:
\family default
\series default

\begin_inset Quotes erd
\end_inset

 (colon)
\end_layout

\begin_layout Itemize
...
 followed by a 
\emph on
code block
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
break
\family default
\series default
 and 
\family typewriter
\series bold
continue
\family default
\series default
 are allowed in loops
\end_layout

\begin_layout Itemize
the (optional) 
\family typewriter
\series bold
else
\family default
\series default
 clause if the loop ends regularly (no 
\family typewriter
\series bold
break
\family default
\series default
)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
More loops
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: for index, item in enumerate(['a', 'b']):
\end_layout

\begin_layout Plain Layout

   ...:     print('Item {}: {}'.format(index, item))
\end_layout

\begin_layout Plain Layout

Item 1: a
\end_layout

\begin_layout Plain Layout

Item 2: b
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: for key, value in [('a', 1), ('b', 2)]:
\end_layout

\begin_layout Plain Layout

   ...:     print('key "{}": {}'.format(key, value))
\end_layout

\begin_layout Plain Layout

key "a": 1
\end_layout

\begin_layout Plain Layout

key "b": 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: for key, value in zip(['a', 'b'], [1, 2]):
\end_layout

\begin_layout Plain Layout

   ...:     print('key "{}": {}'.format(key, value))
\end_layout

\begin_layout Plain Layout

key "a": 1
\end_layout

\begin_layout Plain Layout

key "b": 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: for char in 'string':
\end_layout

\begin_layout Plain Layout

   ...:     print(char, end='  ')
\end_layout

\begin_layout Plain Layout

s  t  r  i  n  g
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
for
\family default
\series default
 loop anti-pattern
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Bad: indexing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: seq = ['a', 'b']
\end_layout

\begin_layout Plain Layout

In [2]: for i in range(2):
\end_layout

\begin_layout Plain Layout

   ...:     print('Item {}: {}'.format(i, seq[i]))
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
lower level approach
\end_layout

\begin_layout Itemize
not necessary indexing (bound checking --> inefficiency)
\end_layout

\begin_layout Itemize
only works on objects that can be indexed (
\family typewriter
[]
\family default
 operator)
\end_layout

\begin_layout Itemize
...
 doesn't work in the general case (iterators, generators, ...)
\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Good: use 
\family typewriter
\series bold
enumerate
\family default
\series default
 instead
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: for index, item in enumerate(['a', 'b']):
\end_layout

\begin_layout Plain Layout

   ...:     print('Item {}: {}'.format(index, item))
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exception handling
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.6
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

    do_something()
\end_layout

\begin_layout Plain Layout

except ExceptionType:
\end_layout

\begin_layout Plain Layout

    handle_this_exception_type()
\end_layout

\begin_layout Plain Layout

except (ExcType1, ExcType2):
\end_layout

\begin_layout Plain Layout

    pass   # explicitly ignore
\end_layout

\begin_layout Plain Layout

except AnotherType as exc:
\end_layout

\begin_layout Plain Layout

	msg = str(exc)
\end_layout

\begin_layout Plain Layout

    do_something_with(msg)
\end_layout

\begin_layout Plain Layout

except Exception: # error base class
\end_layout

\begin_layout Plain Layout

    logger.warning('message')
\end_layout

\begin_layout Plain Layout

    raise  # re-raise
\end_layout

\begin_layout Plain Layout

finally:
\end_layout

\begin_layout Plain Layout

    pass # always executed
\end_layout

\begin_layout Plain Layout

else:     
\end_layout

\begin_layout Plain Layout

    pass # no exception occurred
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\series bold
try
\family default
\series default
 keyword followed by a 
\begin_inset Quotes eld
\end_inset


\family typewriter
\series bold
:
\family default
\series default

\begin_inset Quotes erd
\end_inset

 (colon)
\end_layout

\begin_layout Itemize
the 
\emph on
code block
\end_layout

\begin_layout Itemize
multiple (optional) 
\family typewriter
\series bold
except
\family default
\series default
 clauses
\end_layout

\begin_layout Itemize
the (optional) 
\family typewriter
\series bold
finally
\family default
\series default
 clause is always executed
\end_layout

\begin_layout Itemize
the (optional) 
\family typewriter
\series bold
else
\family default
\series default
 clause is executed only id no exception occurred
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exception raising
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

# standard exception raising
\end_layout

\begin_layout Plain Layout

raise ExceptionType('message')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# re-raising
\end_layout

\begin_layout Plain Layout

except ExceptionType:
\end_layout

\begin_layout Plain Layout

    raise
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# chained exceptions (Python 3 only)
\end_layout

\begin_layout Plain Layout

# give more information about the exception origin
\end_layout

\begin_layout Plain Layout

except ExceptionType as exc:
\end_layout

\begin_layout Plain Layout

    raise AnotherExceptionType('message') form exc
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
with
\family default
\series default
 statement
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.47
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Problem
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

fd = open(filename)
\end_layout

\begin_layout Plain Layout

do_something(fd) # raise
\end_layout

\begin_layout Plain Layout

fd.close() # not executed
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Old style solution (don't use it)
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

fd = open(filename)
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

    do_something(fd)
\end_layout

\begin_layout Plain Layout

finally:
\end_layout

\begin_layout Plain Layout

    fd.close()
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.53
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Resources acquired in the 
\family typewriter
\series bold
with
\family default
\series default
 line are automatically released
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\family typewriter
\series bold
with
\family default
\series default
 statement
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

with open(fname) as fd:
\end_layout

\begin_layout Plain Layout

    do_something(fd)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

lock = threading.Lock()
\end_layout

\begin_layout Plain Layout

with lock:
\end_layout

\begin_layout Plain Layout

    do_something_else()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

with lock, open(fname) as fd:
\end_layout

\begin_layout Plain Layout

    do_something(fd)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Iterating on files
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Iteration of text files
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

with open(src) as fin, open(dst, 'w') as fout:
\end_layout

\begin_layout Plain Layout

    for line in fin:      # line oriented iteration
\end_layout

\begin_layout Plain Layout

        line = line.rstrip('
\backslash
n') # newlines are kept
\end_layout

\begin_layout Plain Layout

        fout.write(line[::-1])   # reverse the line
\end_layout

\begin_layout Plain Layout

        fout.write('
\backslash
n')
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Iteration of binary files
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def simple_copy_file(src, dst):
\end_layout

\begin_layout Plain Layout

    with open(src, 'rb') as fin, 
\backslash

\end_layout

\begin_layout Plain Layout

         open(dst, 'wb') as fout: 
\end_layout

\begin_layout Plain Layout

        for block in fin:       # default block size
\end_layout

\begin_layout Plain Layout

            fout.write(block)  # is 4096 or 8192
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The 
\family typewriter
io
\family default
 module and the like-like interface
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The 
\family typewriter
io
\family default
 module provides Python’s main facilities for dealing with various types
 of I/O: text I/O, binary I/O and raw I/O
\end_layout

\begin_layout Itemize
A concrete object belonging to any of these categories is called a file
 object (or 
\series bold
file-like object
\series default
)
\end_layout

\begin_layout Itemize

\family typewriter
io.StringIO
\family default
 and 
\family typewriter
io.BytesIO
\family default
 provide a 
\series bold
file-like interface
\series default
 for strings and buffers
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
The built-in 
\family typewriter
open
\family default
 factory (
\family typewriter
io.open
\family default
 in Python 3)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

open(file, mode='r', buffering=-1, encoding=None,
\end_layout

\begin_layout Plain Layout

     errors=None, newline=None, closefd=True,
\end_layout

\begin_layout Plain Layout

     opener=None)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
File like objects
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.4
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Attributes
\end_layout

\begin_layout Itemize
closed
\end_layout

\begin_layout Itemize
newlines
\end_layout

\begin_layout Itemize
line_buffering
\end_layout

\begin_layout Itemize
encoding
\end_layout

\begin_layout Itemize
errors
\end_layout

\begin_layout Itemize

\color red
name (real file only)
\end_layout

\begin_layout Itemize

\color red
mode (real file only)
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.3
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Methods
\end_layout

\begin_layout Itemize

\color blue
isatty
\end_layout

\begin_layout Itemize

\color blue
seekable
\end_layout

\begin_layout Itemize

\color blue
readable
\end_layout

\begin_layout Itemize

\color blue
writable
\end_layout

\begin_layout Itemize
fileno
\end_layout

\begin_layout Itemize
truncate
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.3
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
close
\end_layout

\begin_layout Itemize
flush
\end_layout

\begin_layout Itemize
read
\end_layout

\begin_layout Itemize
readline
\end_layout

\begin_layout Itemize
readlines
\end_layout

\begin_layout Itemize
write
\end_layout

\begin_layout Itemize
writelines
\end_layout

\begin_layout Itemize
seek
\end_layout

\begin_layout Itemize
tell
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Functions
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Function definition
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def func(arg1, arg2, ...):
\end_layout

\begin_layout Plain Layout

    '''Docstring'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [function body]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return result
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# calling a function 
\end_layout

\begin_layout Plain Layout

result = func(arg1, arg2, ...)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# or
\end_layout

\begin_layout Plain Layout

func(arg1, arg2, ...)
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\series bold
def
\family default
\series default
 keyword
\end_layout

\begin_layout Itemize
function name
\end_layout

\begin_layout Itemize
(optional) argument
\end_layout

\begin_layout Itemize
colon
\end_layout

\begin_layout Itemize
indentation
\end_layout

\begin_layout Itemize
(optional) docstring
\end_layout

\begin_layout Itemize
(optional) body
\end_layout

\begin_layout Itemize
(optional) 
\family typewriter
\series bold
return
\family default
\series default
 keyword followed bay and (optional) value
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Return values
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def func():
\end_layout

\begin_layout Plain Layout

    pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

result = func()
\end_layout

\begin_layout Plain Layout

result is None # --> True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def func():
\end_layout

\begin_layout Plain Layout

    return 1, 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

result = func()
\end_layout

\begin_layout Plain Layout

type(result)   # --> tuple
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a, b = func()  # unpacking
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
if no return value is specified the 
\family typewriter
\series bold
None
\family default
\series default
 is returned
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Itemize
multiple values can be returned
\end_layout

\begin_layout Itemize
multiple return values are packed into a tuple
\end_layout

\begin_layout Itemize
tuple unpacking can be used to set multiple values in the caller scope
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Default arguments
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Function arguments may have default values
\end_layout

\begin_layout Itemize
Arguments with default values must come after arguments without defaults
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: def hello(name='World'):
\end_layout

\begin_layout Plain Layout

   ...:    print('Hello, %s!' % name)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: hello()
\end_layout

\begin_layout Plain Layout

Hello, World!
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: import os
\end_layout

\begin_layout Plain Layout

In [4]: name = os.getenv('USER')    # antonio
\end_layout

\begin_layout Plain Layout

In [5]: hello(name.capitalize())
\end_layout

\begin_layout Plain Layout

Hello, Antonio!
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Never use mutable objects for default arguments
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
default arguments are attributes of the 
\series bold
function object
\end_layout

\begin_layout Itemize
if someone modifies the mutable object it stay modified for all the following
 calls
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def bad_func(a, L=[]):
\end_layout

\begin_layout Plain Layout

    L.append(a)
\end_layout

\begin_layout Plain Layout

    return L
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def good_func(a, L=None):
\end_layout

\begin_layout Plain Layout

    if L is None:
\end_layout

\begin_layout Plain Layout

        L = []
\end_layout

\begin_layout Plain Layout

    L.append(a)
\end_layout

\begin_layout Plain Layout

    return L
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.55
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: bad_func.__defaults__
\end_layout

\begin_layout Plain Layout

Out[1]: ([],)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: bad_func(1)
\end_layout

\begin_layout Plain Layout

Out[2]: [1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: bad_func(2)
\end_layout

\begin_layout Plain Layout

Out[3]: [1, 2]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: bad_func.__defaults__
\end_layout

\begin_layout Plain Layout

Out[4]: ([1, 2],)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Positional vs keyword arguments
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: def func(a, b, c=None, d=None):
\end_layout

\begin_layout Plain Layout

   ...:     pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: func(1, 2, 3, 4)         # all positional
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: func(1, 2, d=4)          # 'd' passed by name
\end_layout

\begin_layout Plain Layout

                                 # default 'c' parameter
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: func(1, d=4, b=2)        # arbitrary order
\end_layout

\begin_layout Plain Layout

                                 # for keyword args
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: func(c=3, a=1, d=4, b=2) # all keyword
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: args = tuple(1, 2)
\end_layout

\begin_layout Plain Layout

In [7]: kwargs = {'c': 3, 'd': 4}
\end_layout

\begin_layout Plain Layout

In [5]: func(*args, **kwargs)    # args unpacking
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable number of arguments (1/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def trace(func, *args, **kwargs):
\end_layout

\begin_layout Plain Layout

    # func is mandatory
\end_layout

\begin_layout Plain Layout

    # type(args)   --> tuple - default ()
\end_layout

\begin_layout Plain Layout

    # type(kwargs) --> dict  - default {}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    name = func.__name__         # functions are objects
\end_layout

\begin_layout Plain Layout

    args_str = ', '.join(
\end_layout

\begin_layout Plain Layout

            [repr(arg) for arg in args] +
\end_layout

\begin_layout Plain Layout

            ['%s=%r' % (k, v) for k, v in kwargs.items()])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    print('TRACE: %s(%s)' % (name, args_str))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ret = func(*args, **kwargs)  # argumnts unpacking
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    print('TRACE: %s --> %r' % (name, ret))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return ret
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable number of arguments (2/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: def simple_sum(a, b, c=0):
\end_layout

\begin_layout Plain Layout

   ...:     print('This is "simple_sum"')
\end_layout

\begin_layout Plain Layout

   ...:
\end_layout

\begin_layout Plain Layout

   ...:     return a + b + c
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: trace(simple_sum, 10, b=20, c=30)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TRACE: simple_sum(10, c=30, b=20)
\end_layout

\begin_layout Plain Layout

This is "simple_sum"
\end_layout

\begin_layout Plain Layout

TRACE: simple_sum --> 60 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Scopes
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Variable look-up:
\end_layout

\begin_layout Itemize
local (function) scope
\end_layout

\begin_layout Itemize
parent scope
\end_layout

\begin_layout Itemize
parent scope of the parent scope
\end_layout

\begin_layout Itemize
...
\end_layout

\begin_layout Itemize
up to the module global scope
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: BASE = 10
\end_layout

\begin_layout Plain Layout

In [2]: def pow10(n):
\end_layout

\begin_layout Plain Layout

   ...:     return BASE ** n
\end_layout

\begin_layout Plain Layout

In [3]: pow10(2)
\end_layout

\begin_layout Plain Layout

Out[3]: 100
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Closures
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
References to the globals scope and to non-local variables from parent scopes
 are stored in the function object
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: def pow_func_generator(base=10):
\end_layout

\begin_layout Plain Layout

   ...:     def pow_func(n):
\end_layout

\begin_layout Plain Layout

   ...:         return base ** n # base: parent scope
\end_layout

\begin_layout Plain Layout

   ...:     return pow_func      # returns a function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: # this is another way to define a function
\end_layout

\begin_layout Plain Layout

In [3]: pow2 = pow_func_generator(base=2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: # no 'base' variable defined in this scope
\end_layout

\begin_layout Plain Layout

In [5]: pow2(3)
\end_layout

\begin_layout Plain Layout

Out[5]: 8 
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Decorators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

import logging
\end_layout

\begin_layout Plain Layout

import functools
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def trace(func):
\end_layout

\begin_layout Plain Layout

    @functools.wraps(func)
\end_layout

\begin_layout Plain Layout

    def wrapper(*args, **kwargs):
\end_layout

\begin_layout Plain Layout

        name = func.__name__
\end_layout

\begin_layout Plain Layout

        args_str = ', '.join(
\end_layout

\begin_layout Plain Layout

            [repr(arg) for arg in args] +
\end_layout

\begin_layout Plain Layout

            ['%s=%r' % (k, v) for k, v in kwargs.items()]) 
\end_layout

\begin_layout Plain Layout

        logging.debug('%s(%s)' % (name, args_str))
\end_layout

\begin_layout Plain Layout

        ret = func(*args, **kwargs)
\end_layout

\begin_layout Plain Layout

        logging.debug('%s --> %r' % (name, ret))
\end_layout

\begin_layout Plain Layout

        return ret
\end_layout

\begin_layout Plain Layout

    return wrapper
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Decorators what?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A 
\series bold
decorator
\end_layout

\begin_layout Itemize
is function returning another function
\end_layout

\begin_layout Itemize
performs some generic transformation (checks, logging, arguments filtering,
 etc.)
\end_layout

\begin_layout Itemize
can be applied using the special 
\family typewriter
\series bold
@wrapper
\family default
\series default
 syntax
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

# equivalent to: do_something = trace(do_something)
\end_layout

\begin_layout Plain Layout

In [1]: @trace
\end_layout

\begin_layout Plain Layout

   ...: def do_something():
\end_layout

\begin_layout Plain Layout

   ...:     pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: do_something()
\end_layout

\begin_layout Plain Layout

DEBUG: do_something()
\end_layout

\begin_layout Plain Layout

DEBUG: do_something --> None
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Prefer EAFP over LBYL
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
EAFP: It's 
\series bold
E
\series default
asier to 
\series bold
A
\series default
sk 
\series bold
F
\series default
orgiveness than 
\series bold
P
\series default
ermission (É più facile chiedere perdono che il permesso)
\end_layout

\begin_layout Description
LBYL: 
\series bold
L
\series default
ook 
\series bold
B
\series default
efore 
\series bold
Y
\series default
ou 
\series bold
L
\series default
eap (Guarda prima di saltare)
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def simple_sum_eafp(a, b):
\end_layout

\begin_layout Plain Layout

    return a + b
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def simple_sum_lbyl(a, b):
\end_layout

\begin_layout Plain Layout

    if not isinstance(a, (int, float)):
\end_layout

\begin_layout Plain Layout

        raise TypeError('invalid type for "a"')
\end_layout

\begin_layout Plain Layout

    [...]
\end_layout

\begin_layout Plain Layout

    return a + b
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Duck typing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
The duck test
\end_layout

\end_inset


\end_layout

\begin_layout Block
If it walks like a duck, and talks like a duck, and looks like a duck: it's
 a duck.
 (Goose? Close enough.)
\end_layout

\end_deeper
\begin_layout FragileFrame

\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: simple_sum_eafp(2, 2)
\end_layout

\begin_layout Plain Layout

Out[1]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: simple_sum_lbyl(2, 2)
\end_layout

\begin_layout Plain Layout

Out[2]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: # str quacks
\end_layout

\begin_layout Plain Layout

In [4]: simple_sum_eafp('Hello, ', 'World!')
\end_layout

\begin_layout Plain Layout

Out[4]: 'Hello, World!'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Duck typing vs C++ templates
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Duck typing may look similar to C++ templates in the practical use.
\end_layout

\begin_layout Standard
Technically specking they are dramatically different:
\end_layout

\begin_layout Itemize
all is resolved at runtime in Python
\end_layout

\begin_layout Itemize
all have to be known at compile time in C++ templates (static polymorphism)
\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Python
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def simple_sum(a, b):
\end_layout

\begin_layout Plain Layout

    return a + b
\end_layout

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
C++
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

template<typename T>
\end_layout

\begin_layout Plain Layout

T simple_sum(const T& a, 
\end_layout

\begin_layout Plain Layout

             const T& b)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    return a + b;
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Modules and packages
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Modules
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
a module is a file containing Python definitions and statements (functions,
 classes, variables, etc.)
\end_layout

\begin_layout Itemize
the name of the module in the code is the same of the file without the suffix
 
\family typewriter
.py
\end_layout

\begin_layout Itemize
within a module, the module’s name (as a string) is available as the value
 of the global variable 
\family typewriter
__name__
\end_layout

\begin_layout Itemize
modules are also 
\family typewriter
\series bold
object
\family default
\series default
s, 
\family typewriter
\series bold
__name__
\family default
\series default
 and 
\family typewriter
\series bold
__doc__
\family default
\series default
 (for 
\emph on
docstrings
\emph default
) are attributes of the module object
\end_layout

\begin_layout Itemize
modules can be 
\family typewriter
\series bold
import
\family default
\series default
ed from other modules and scripts
\end_layout

\begin_layout Itemize
the import process automatically compiles modules (not scripts) into bytecode
 and caches it into a 
\family typewriter
.pyc
\family default
 (or 
\family typewriter
.pyo
\family default
) file
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Packages
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
a packages is a directory collecting modules
\end_layout

\begin_layout Itemize
a directory is a package if it includes an 
\family typewriter
__init__.py
\family default
 file (eventually empty)
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Package example
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

pkg
\end_layout

\begin_layout Plain Layout

|-- __init__.py
\end_layout

\begin_layout Plain Layout

|-- mod01.py
\end_layout

\begin_layout Plain Layout

|-- mod02.py
\end_layout

\begin_layout Plain Layout

+-- __pycache__
\end_layout

\begin_layout Plain Layout

    |-- __init__.cpython-35.pyc
\end_layout

\begin_layout Plain Layout

    +-- mod01.cpython-35.pyc
\end_layout

\begin_layout Plain Layout

+-- subpkg
\end_layout

\begin_layout Plain Layout

    |-- __init__.py
\end_layout

\begin_layout Plain Layout

    +-- mod11.py
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Using modules and packages
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
\series bold
import
\family default
\series default
 statement:
\end_layout

\begin_layout Itemize
search the module file
\end_layout

\begin_layout Itemize
compile it to bytecode if necessary
\end_layout

\begin_layout Itemize
executes the module (creates a module object, classes and functions in it),
 and
\end_layout

\begin_layout Itemize
binds the module to a local variable
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.55
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Import examples
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

import module
\end_layout

\begin_layout Plain Layout

import module as alias
\end_layout

\begin_layout Plain Layout

from module import something
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pkg
\end_layout

\begin_layout Plain Layout

import pkg.mod01
\end_layout

\begin_layout Plain Layout

from pkg.subpkg import mod11
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# In pkg.subpkg.__init__.py
\end_layout

\begin_layout Plain Layout

from pkg.subpkg import mod11
\end_layout

\begin_layout Plain Layout

from .
 import mod11 # relative
\end_layout

\begin_layout Plain Layout

from ..
 import mod01
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Modules search path
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Only modules and packages in the Python search path can be imported
\end_layout

\begin_layout Itemize
The system search path and the current working directory are always in the
 Python search path
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Path control from code
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

import sys
\end_layout

\begin_layout Plain Layout

sys.path.insert(0, "some/path")  # sys.path is a list
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Path control from the environment
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

export PYTHONPATH=some/path:${PYTHONPATH}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Using modules as scripts
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.55
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
the 
\emph on
shebang
\emph default
 string is used to specify the interpreter
\end_layout

\begin_layout Itemize
the encoding specification
\end_layout

\begin_layout Itemize
modules can have a 
\emph on
docstring
\end_layout

\begin_layout Itemize
function and classes are declared
\end_layout

\begin_layout Itemize
if the file is imported as a module, then the 
\family typewriter
\series bold
__name__
\family default
\series default
 is set to the module name
\end_layout

\begin_layout Itemize
if the file is run as a script then the 
\family typewriter
\series bold
__name__
\family default
\series default
 is set to 
\family typewriter
'__main__'
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#!/usr/bin/env python3
\end_layout

\begin_layout Plain Layout

# -*- coding: utf-8 -*-
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

'''Module docstring'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def func():
\end_layout

\begin_layout Plain Layout

    pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main():
\end_layout

\begin_layout Plain Layout

    func()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    main()
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Object Oriented Programming
\end_layout

\begin_layout Subsection
User defined types
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
class
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.63
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class UserTypeName(object):
\end_layout

\begin_layout Plain Layout

    '''Class docstring'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def  __init__(self, arg1, ...):
\end_layout

\begin_layout Plain Layout

        '''Initializer docstring'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

         self.attr = arg1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def method(self, arg1, ...):
\end_layout

\begin_layout Plain Layout

        '''Method docstring'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        do_something()
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return value
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.4
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\series bold
class
\family default
\series default
 keyword
\end_layout

\begin_layout Itemize
base class(es), object is redundant in Python 3
\end_layout

\begin_layout Itemize
class 
\emph on
docstring
\end_layout

\begin_layout Itemize
initializer (special method)
\end_layout

\begin_layout Itemize
methods like function
\end_layout

\begin_layout Itemize
explicit 
\series bold
self
\series default
 parameter (instance) in method definition
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

from math import pi
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Circle(object):
\end_layout

\begin_layout Plain Layout

    def  __init__(self, r):
\end_layout

\begin_layout Plain Layout

         self.r = r
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def area(self):
\end_layout

\begin_layout Plain Layout

        # pi * r**2 --> error
\end_layout

\begin_layout Plain Layout

        return pi * self.r**2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

c = Circle(r=1)
\end_layout

\begin_layout Plain Layout

area = c.area()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# also possible
\end_layout

\begin_layout Plain Layout

area = Circle.area(c)
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.55
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
self
\series default
 is the instance on which the method acts
\end_layout

\begin_layout Itemize
the 
\series bold
self
\series default
 argument must be explicitly listed in method definition
\end_layout

\begin_layout Itemize

\series bold
self
\series default
 is the only way to access instance attributes and methods
\end_layout

\begin_layout Itemize
no need specify 
\series bold
self
\series default
 in (
\emph on
bound
\emph default
) method call
\end_layout

\begin_layout Itemize
it is also possible to call 
\emph on
unbound methods
\emph default
 passing the instance explicitly
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
__init__
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
__init__ is a 
\series bold
special method
\end_layout

\begin_layout Itemize
it is automatically called when an object is created
\end_layout

\begin_layout Itemize
__init__is used to initialize instance attributes (
\emph on
initializer
\emph default
 method)
\end_layout

\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Readability counts
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Although it is not mandatory it is strongly recommended to initialize 
\series bold
all
\series default
 attributes in the 
\family typewriter
\series bold
__init__
\family default
\series default
 method or 
\family typewriter
\series bold
base.__init__
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Freedom and good judgment
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class UserType(object):
\end_layout

\begin_layout Plain Layout

    def __init__(self, a):
\end_layout

\begin_layout Plain Layout

        self.a = a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def method(self, b):
\end_layout

\begin_layout Plain Layout

        self.b = b
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

obj = UserType('a')
\end_layout

\begin_layout Plain Layout

hasattr(obj, 'a')  # True
\end_layout

\begin_layout Plain Layout

hasattr(obj, 'b')  # False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

obj.method('b')
\end_layout

\begin_layout Plain Layout

hasattr(obj, 'b')  # True!
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

obj.c = 'c'  # also allowed
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Python is very 
\emph on
flexibility
\emph default
 and gives the developer 
\emph on
freedom
\emph default
 to do almost anything
\end_layout

\begin_layout Itemize

\series bold
it is responsibility of the developer to mess around
\end_layout

\begin_layout Itemize
the fact that it is possible to do something doesn't mean it is a good idea
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Visibility (public, private, ...)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
In Python do not exist visibility access modifiers
\end_layout

\begin_layout Itemize
Python does not enforces access restrictions at language level
\end_layout

\begin_layout Itemize
an universally known naming convention is used instead
\end_layout

\begin_layout Itemize
Protected/private attributes/methods start with a single underscore: 
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline true
status open

\begin_layout Plain Layout

self._protected_attribute
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Avoiding name clashes
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Attributes starting with a double underscore (
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline true
status open

\begin_layout Plain Layout

__name
\end_layout

\end_inset

) are not directly accessible from outside the class definition code
\end_layout

\begin_layout Itemize
If have to be intended as a mechanism to avoid name clashes with names defined
 by sub-classes rather then a way to implement access restrictions
\end_layout

\begin_layout Itemize
Those attributes are accessible by the client code simply using: 
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline true
status open

\begin_layout Plain Layout

obj._ClassName__name
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Visibility examples
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: class UserType(object):
\end_layout

\begin_layout Plain Layout

   ...:    def __init__(self):
\end_layout

\begin_layout Plain Layout

   ...:        self._a = 'protected/private'
\end_layout

\begin_layout Plain Layout

   ...:        self.__b = 'safe name' # protected/private
\end_layout

\begin_layout Plain Layout

   ...:
\end_layout

\begin_layout Plain Layout

   ...:    def method(self):
\end_layout

\begin_layout Plain Layout

   ...:        self._a = 'something'
\end_layout

\begin_layout Plain Layout

   ...:        self.__b = ''          # simple access
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: obj = UserType()
\end_layout

\begin_layout Plain Layout

In [3]: obj._a
\end_layout

\begin_layout Plain Layout

Pur[3]: 'protected/private'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: obj.__b
\end_layout

\begin_layout Plain Layout

AttributeError: 'UserType' object has no attribute '__b'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: obj._UserType__b
\end_layout

\begin_layout Plain Layout

Out[5]: 'safe name'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Inheritance
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Python supports both single and multiple inheritance
\end_layout

\begin_layout Itemize
Base classes are listed in parentheses after the (derived) class name
\end_layout

\begin_layout Itemize
The base class constructor have to be called explicitly (if it is necessary)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class Derived(Base):
\end_layout

\begin_layout Plain Layout

    def __init__(self, *args, **kwargs):
\end_layout

\begin_layout Plain Layout

        # Base.__init__(self, *args, **kwargs) # or
\end_layout

\begin_layout Plain Layout

        super().__init__(*args, **kwargs) # recommended
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        self.derived_attr = None   # derived class code
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def method(self):
\end_layout

\begin_layout Plain Layout

        do_other_stuff()           # derived class code
\end_layout

\begin_layout Plain Layout

        return super().method(*args, **kwargs)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
\series bold
super
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\series bold
super
\family default
\series default
 returns a proxy object that delegates method calls to a parent class
\end_layout

\begin_layout Itemize
It is the key element to implement the so called 
\series bold
cooperative-inheritance
\end_layout

\begin_layout Itemize
In Python 2 you have explicitly inherit form object to use 
\family typewriter
\series bold
super
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\family typewriter
\series bold
super
\family default
\series default
 in Python 2 and Python 3
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

# Pythpn 2 and Python 3
\end_layout

\begin_layout Plain Layout

super(Derived, self).__init__(*args, **kwargs)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Python 3 only
\end_layout

\begin_layout Plain Layout

super().__init__(*args, **kwargs)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Multiple inheritance (1/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.6
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class Root(object):
\end_layout

\begin_layout Plain Layout

    def __init__(self, arg):
\end_layout

\begin_layout Plain Layout

        print('Root(%r)' % arg)
\end_layout

\begin_layout Plain Layout

        # no args for object
\end_layout

\begin_layout Plain Layout

        super().__init__()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Base1(Root):
\end_layout

\begin_layout Plain Layout

    def __init__(self, arg):
\end_layout

\begin_layout Plain Layout

        print('Base1(%r)' % arg)
\end_layout

\begin_layout Plain Layout

        super().__init__(arg)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Base2(Root):
\end_layout

\begin_layout Plain Layout

    def __init__(self, arg):
\end_layout

\begin_layout Plain Layout

        print('Base2(%r)' % arg)
\end_layout

\begin_layout Plain Layout

        super().__init__(arg)
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.4
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Diamond inheritance
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/diamond-inheritance.svg
	height 70theight%

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Multiple inheritance (2/2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class Derived(Base1, Base2):
\end_layout

\begin_layout Plain Layout

    def __init__(self, arg):
\end_layout

\begin_layout Plain Layout

        print('Derived(%r)' % arg)
\end_layout

\begin_layout Plain Layout

        super().__init__(arg)
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: obj = Derived('arg')
\end_layout

\begin_layout Plain Layout

Derived('arg')
\end_layout

\begin_layout Plain Layout

Base1('arg')
\end_layout

\begin_layout Plain Layout

Base2('arg')     # NOTE: Base2 before Root
\end_layout

\begin_layout Plain Layout

Root('arg')      # NOTE: Root appears only once
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Method Resolution Order (MRO)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Methods are called according to the MRO
\end_layout

\begin_layout Itemize
current class (
\family typewriter
Derived
\family default
)
\end_layout

\begin_layout Itemize
parent classes in order (
\family typewriter
Base1
\family default
, 
\family typewriter
Base2
\family default
)
\end_layout

\begin_layout Itemize
then parents of parent classes (
\family typewriter
Root
\family default
 and 
\family typewriter
\series bold
object
\family default
\series default
)
\end_layout

\begin_layout Standard
Please note
\end_layout

\begin_layout Itemize
the method of the 
\family typewriter
Root
\family default
 class is called only once
\end_layout

\begin_layout Itemize
and always after the methods of all the 
\family typewriter
Base*
\family default
 classes
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
The 
\family typewriter
\series bold
mro()
\family default
\series default
 static method
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [2]: Derived.mro()
\end_layout

\begin_layout Plain Layout

Out[2]: [<class '__main__.Derived'>,
\end_layout

\begin_layout Plain Layout

   ...:  <class '__main__.Base1'>,
\end_layout

\begin_layout Plain Layout

   ...:  <class '__main__.Base2'>,
\end_layout

\begin_layout Plain Layout

   ...:  <class '__main__.Root'>,
\end_layout

\begin_layout Plain Layout

   ...:  <class 'object'>] 
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Breaking the super chain
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
What if I forgot to call the 
\family typewriter
\series bold
super()
\series default
.method
\family default
 in e.g.
 
\family typewriter
Base1
\family default
?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class Base1(Root):
\end_layout

\begin_layout Plain Layout

    def __init__(self, arg):
\end_layout

\begin_layout Plain Layout

        print('Base1(%r)' % arg)
\end_layout

\begin_layout Plain Layout

        # super().__init__(arg)  # call chain broken
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Then Base1
\family typewriter
('arg')
\family default
 and 
\family typewriter
Root('arg')
\family default
 are never called
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: obj = Derived('arg')
\end_layout

\begin_layout Plain Layout

Derived('arg')
\end_layout

\begin_layout Plain Layout

Base1('arg')
\end_layout

\begin_layout Plain Layout

# Base2('arg')   # not called
\end_layout

\begin_layout Plain Layout

# Root('arg')    # not called
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Inheriting form 
\family typewriter
\series bold
object
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The 
\family typewriter
\series bold
object
\family default
\series default
 type was introduced in Python 2.2 to maintain compatibility with the old
 object model:
\end_layout

\begin_deeper
\begin_layout Itemize
classes not inheriting from 
\family typewriter
\series bold
object
\family default
\series default
 maintained the old behavior
\end_layout

\begin_layout Itemize
classes inheriting form 
\family typewriter
\series bold
object
\family default
\series default
 behave according to the new object model
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
Old style classes
\emph default
 are still the default Python 2.7 while the new object model is to only one
 in Python 3
\end_layout

\begin_layout Itemize
In short: inheriting form 
\family typewriter
\series bold
object
\series default
 is
\end_layout

\begin_deeper
\begin_layout Itemize
mandatory in Python 2 if woy want the new object model
\end_layout

\begin_layout Itemize
is redundant in Python 3
\end_layout

\begin_layout Itemize
recommended in Python 3 if you want to write code that is compatible with
 Python 2
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Special methods (protocols)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Methods starting and anding with a double underscore (
\family typewriter
\series bold
__*__
\family default
\series default
) are called 
\emph on
special methods
\end_layout

\begin_layout Itemize
sometimes special methods receive a special treatment, e.g.
\end_layout

\begin_deeper
\begin_layout Itemize
__init__ is automatically called when an instance is created
\end_layout

\begin_layout Itemize
operators: 
\family typewriter
__add__
\family default
 (
\family typewriter
+
\family default
, and 
\family typewriter
sum
\family default
), 
\family typewriter
__sub__
\family default
 (
\family typewriter
-
\family default
), 
\family typewriter
__mul__
\family default
 (
\family typewriter
*
\family default
), 
\family typewriter
__truediv__
\family default
 (
\family typewriter
/
\family default
), 
\family typewriter
__floordiv__
\family default
 (
\family typewriter
//
\family default
), 
\family typewriter
__mod__
\family default
 (
\family typewriter
%
\family default
)
\end_layout

\begin_layout Itemize
comparison: 
\family typewriter
__eq__
\family default
 (
\family typewriter
==
\family default
), 
\family typewriter
__ne__
\family default
 (
\family typewriter
!=
\family default
), 
\family typewriter
__lt__
\family default
 (
\family typewriter
<
\family default
), 
\family typewriter
__le__
\family default
 (
\family typewriter
<=
\family default
), 
\family typewriter
__gt__
\family default
 (
\family typewriter
>
\family default
), 
\family typewriter
__ge__
\family default
 (
\family typewriter
>=
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
__contains__
\family default
 (
\family typewriter
\series bold
in
\family default
\series default
), 
\family typewriter
__call__
\end_layout

\begin_layout Itemize

\family typewriter
__getitem__
\family default
, 
\family typewriter
__setitem__
\family default
 (indexing 
\family typewriter
[]
\family default
)
\end_layout

\end_deeper
\begin_layout Itemize
..
 or they are used to implement the so called 
\series bold
protocols
\series default
:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
len(obj)
\family default
 (
\family typewriter
__len__
\family default
), 
\family typewriter
pow(num) (__pow__), abs(num) (__abs__), str(obj)
\family default
 (
\family typewriter
__str__
\family default
), 
\family typewriter
repr(obj)
\family default
 (
\family typewriter
__repr__
\family default
), 
\family typewriter
iter(obj)
\family default
 (
\family typewriter
__iter__
\family default
), 
\family typewriter
next(obj)
\family default
 (
\family typewriter
__next__
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
with
\family default
\series default
 statement (
\family typewriter
__enter__
\family default
, 
\family typewriter
__exit__
\family default
)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Defining/overloading special methods
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class UserType(object):
\end_layout

\begin_layout Plain Layout

    def __repr__(self):
\end_layout

\begin_layout Plain Layout

        return 'bla bla bla'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __enter__(self):
\end_layout

\begin_layout Plain Layout

        print('acquiring resources')
\end_layout

\begin_layout Plain Layout

        return self   # used by the 'as' clause
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __exit__(self, exc_type, exc_val, exc_tb):
\end_layout

\begin_layout Plain Layout

        print('releasing resources')
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: obj = UserType()
\end_layout

\begin_layout Plain Layout

In [2]: obj
\end_layout

\begin_layout Plain Layout

Out[2]: bla bla bla
\end_layout

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [3]: with obj:
\end_layout

\begin_layout Plain Layout

   ...:     print('do job')
\end_layout

\begin_layout Plain Layout

acquiring resources
\end_layout

\begin_layout Plain Layout

do job
\end_layout

\begin_layout Plain Layout

releasing resources
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Static methods/attributes
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class UserType(object):
\end_layout

\begin_layout Plain Layout

    STATIC_CONSTANT = None  # static attribute
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __init__(self):
\end_layout

\begin_layout Plain Layout

        self.default = self.STATIC_CONSTANT # note the self
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @staticmethod           # property
\end_layout

\begin_layout Plain Layout

    def some_static_method(*args, **kwargs):
\end_layout

\begin_layout Plain Layout

        # NOTE: no self argument here
\end_layout

\begin_layout Plain Layout

        print('static')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [1]: print(UserType.STATIC_CONSTANT)
\end_layout

\begin_layout Plain Layout

Out[1]: None
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: # also works with obj.some_static_method()
\end_layout

\begin_layout Plain Layout

In [3]: UserType.some_static_method()
\end_layout

\begin_layout Plain Layout

Out[3]: static
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Properties
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Sometimes some of the attributes of an object are strictly related and have
 values that depend on each other: e.g.
 the radius and the diameter, circumference , area, etc.
 of a circle
\end_layout

\begin_layout Itemize
It is natural to think to them as attributes of the object
\end_layout

\begin_layout Itemize
In other programming languages (e.g.
 C++ and Java) it is recommended to keep attributes private or protected
 and access them via 
\emph on
getter/setter methods
\end_layout

\begin_layout Itemize
...
 but 
\emph on
getter/setter methods
\emph default
 are boring
\end_layout

\begin_layout Itemize

\emph on
getter/setter methods
\emph default
 are basically a work-around for a limitation of the language: it is not
 possible to keep in sync two attributes if one if them is modified directly
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Properties: use case
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: c = Circle()
\end_layout

\begin_layout Plain Layout

In [2]: c.radius = 3       # set the redius
\end_layout

\begin_layout Plain Layout

In [3]: c.diameter
\end_layout

\begin_layout Plain Layout

Out[3]: 6                  # the diameter stay consistent
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: c.area
\end_layout

\begin_layout Plain Layout

Out[4]: 28.274333882308138 # ...
 and the area too
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: c.diameter = 5     # now the diameter is changed
\end_layout

\begin_layout Plain Layout

In [6]: c.radius
\end_layout

\begin_layout Plain Layout

Out[6]: 2.5                # hey, the radius has been
\end_layout

\begin_layout Plain Layout

                           # updated as well!
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [7]: c.circumference
\end_layout

\begin_layout Plain Layout

Out[7]: 15.707963267948966 # and the circumference too
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Defining Properties
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class Circle(Shape):
\end_layout

\begin_layout Plain Layout

    def __init__(self, r=0):
\end_layout

\begin_layout Plain Layout

        self._r = r            # one protected attribute
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @property                  # decorator
\end_layout

\begin_layout Plain Layout

    def radius(self):          # getter
\end_layout

\begin_layout Plain Layout

        return self._r
\end_layout

\begin_layout Plain Layout

    @radius.setter
\end_layout

\begin_layout Plain Layout

    def radius(self, value):   # setter
\end_layout

\begin_layout Plain Layout

        self._r = value
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @property
\end_layout

\begin_layout Plain Layout

    def diameter(self):        # getter
\end_layout

\begin_layout Plain Layout

        return 2 * self._r
\end_layout

\begin_layout Plain Layout

    @diameter.setter
\end_layout

\begin_layout Plain Layout

    def diameter(self, value): # setter: if omitted then
\end_layout

\begin_layout Plain Layout

        self._r = value / 2    # the property is read-only
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Examples
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Setting up a virtual environment
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ python3 -m venv testenv
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ ls testenv/
\end_layout

\begin_layout Plain Layout

bin  include  lib  lib64  pyvenv.cfg  share
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ source testenv/bin/activate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

(testenv) $ which python
\end_layout

\begin_layout Plain Layout

/home/antonio/python-training/examples/testenv/bin/python
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

(testenv) $ pip install pep8
\end_layout

\begin_layout Plain Layout

pip install pep8
\end_layout

\begin_layout Plain Layout

Collecting pep8
\end_layout

\begin_layout Plain Layout

  Using cached pep8-1.7.0-py2.py3-none-any.whl
\end_layout

\begin_layout Plain Layout

Installing collected packages: pep8
\end_layout

\begin_layout Plain Layout

Successfully installed pep8-1.7.0
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercise solution
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def pretty_file_size_str(size):
\end_layout

\begin_layout Plain Layout

    '''String representation of file size
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Gets a size in bytes and return the its string
\end_layout

\begin_layout Plain Layout

    representation using appropriate units.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    UNITS = ('Bytes', 'KB', 'MB', 'GB', 'TB', 'PB')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for exponent, units_str in enumerate(UNITS):
\end_layout

\begin_layout Plain Layout

        normalized_size = size / 1024**exponent
\end_layout

\begin_layout Plain Layout

        if normalized_size < 1024:
\end_layout

\begin_layout Plain Layout

            break
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return '%.2f %s' % (normalized_size, units_str) 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Using doctests
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def pretty_file_size_str(size):
\end_layout

\begin_layout Plain Layout

    '''String representation of file size
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    >>> pretty_file_size_str(1.3 * 1024**5)
\end_layout

\begin_layout Plain Layout

    '1.30 PB'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    >>> pretty_file_size_str(1.3 * 1024)
\end_layout

\begin_layout Plain Layout

    '1.30 KB'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    >>> pretty_file_size_str(18)
\end_layout

\begin_layout Plain Layout

    '18.00 Bytes'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    >>> pretty_file_size_str(0.3)
\end_layout

\begin_layout Plain Layout

    '0.30 Bytes'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Running doctests
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ python3 -m doctest -v prettysize_exercise.py
\end_layout

\begin_layout Plain Layout

Trying:
\end_layout

\begin_layout Plain Layout

    pretty_file_size_str(1.3 * 1024**5)
\end_layout

\begin_layout Plain Layout

Expecting:
\end_layout

\begin_layout Plain Layout

    '1.30 PB'
\end_layout

\begin_layout Plain Layout

ok
\end_layout

\begin_layout Plain Layout

Trying:
\end_layout

\begin_layout Plain Layout

    pretty_file_size_str(1.3 * 1024)
\end_layout

\begin_layout Plain Layout

Expecting:
\end_layout

\begin_layout Plain Layout

    '1.30 KB'
\end_layout

\begin_layout Plain Layout

ok
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

1 items passed all tests:
\end_layout

\begin_layout Plain Layout

   4 tests in prettysize_exercise.pretty_file_size_str
\end_layout

\begin_layout Plain Layout

4 tests in 2 items.
\end_layout

\begin_layout Plain Layout

4 passed and 0 failed.
\end_layout

\begin_layout Plain Layout

Test passed.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercise solution - Part 2
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import os, hashlib
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # a.
 print the fill module path
\end_layout

\begin_layout Plain Layout

    print('filename: {}'.format(os.path.abspath(__file__)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # b.
 print the module size
\end_layout

\begin_layout Plain Layout

    size = os.path.getsize(__file__)
\end_layout

\begin_layout Plain Layout

    print('size: {}'.format(pretty_file_size_str(size)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # c.
 print the MD5 checksum of the module file
\end_layout

\begin_layout Plain Layout

    md5 = hashlib.md5()
\end_layout

\begin_layout Plain Layout

    with open(__file__, 'rb') as fd:
\end_layout

\begin_layout Plain Layout

        for data in fd:
\end_layout

\begin_layout Plain Layout

            md5.update(data)
\end_layout

\begin_layout Plain Layout

    basename = os.path.basename(__file__)
\end_layout

\begin_layout Plain Layout

    print('{} *{}'.format(basename, md5.hexdigest())) 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Output
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ python3 prettysize_exercise.py
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

filename: /home/antonio/python-training/examples/prettysize_exercise.py
\end_layout

\begin_layout Plain Layout

size: 1.28 KB
\end_layout

\begin_layout Plain Layout

prettysize_exercise.py *20623019d6b3bdc22898c9b567262434 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Finding duplicate files
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Problem:
\end_layout

\begin_layout Itemize
CLS maintains an FTP site for Sentinel 1 Mission Performance Center (MPC)
 activities
\end_layout

\begin_layout Itemize
Huge amount of data
\end_layout

\begin_layout Itemize
Organized in a directory tree
\end_layout

\begin_layout Itemize
Unfortunately the same product can be present in different directories
\end_layout

\begin_layout Itemize
...
 even worst, the same product processed by different entities or at different
 time is stored with different file name
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\size scriptsize
S1A_S6_RAW__0ADH_20120101T034339_20120101T034400_001771_000001_F6EC.SAFE
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Requirements
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Write a Python program that finds all duplicate files in the specified directory
 and:
\end_layout

\begin_layout Itemize
prints the total number of files
\end_layout

\begin_layout Itemize
prints the total number of duplicate files
\end_layout

\begin_layout Itemize
(optionally) computes the amount of disk space wasted by duplicates
\end_layout

\begin_layout Itemize
(optionally) prints the list of duplicate files
\end_layout

\begin_layout Standard
The program shall have a simple command line user interface also having
 an option for printing the usage documentation
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Data structure
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Duplicate files can be stored in a dictionary:
\end_layout

\begin_layout Description
keys: are base names of files (and are unique)
\end_layout

\begin_layout Description
values: are a list of full path names of all replicas
\end_layout

\begin_layout Standard
The dictionary is associated to 
\family typewriter
Result
\family default
 class that also provides methods to manipulate it
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

result.data = {
\end_layout

\begin_layout Plain Layout

    'A.SAFE': ['PATH/1/A.SAFE', 'PATH/2/A.SAFE', ...],
\end_layout

\begin_layout Plain Layout

    'B.SAFE': ['PATH/1/B.SAFE', 'PATH/2/B.SAFE'],
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Test Driven Development approach (TDD)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
write tests 
\series bold
before
\series default
 the program code
\end_layout

\begin_layout Itemize
use automated tests for unit testing
\end_layout

\begin_layout Itemize
tests express specifications
\end_layout

\begin_layout Itemize
the SW is OK when it passes all tests
\end_layout

\begin_layout Itemize
iterative development
\end_layout

\begin_layout Itemize
short development cycles
\end_layout

\begin_layout Itemize
phases:
\end_layout

\begin_deeper
\begin_layout Itemize
write automatic tests for the new function (specifications/API design):
 the code still doesn't exist so tests fail
\end_layout

\begin_layout Itemize
development of the new function by writing the minimal amount code to make
 all tests pass
\end_layout

\begin_layout Itemize
refactoring: re-work the code to harmonize all parts of the program and
 have a better overall design.
 All test shall pass untouched
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic tests for our duplicate file finder
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class ScanDuplicatesTestCase(unittest.TestCase,
\end_layout

\begin_layout Plain Layout

                             CreateTestDirMixin):
\end_layout

\begin_layout Plain Layout

    def test_scan_result(self):
\end_layout

\begin_layout Plain Layout

        result = s1duplicates.scan_duplicates(self.root)
\end_layout

\begin_layout Plain Layout

        self.assertTrue(hasattr(result, 'data'))	
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

    def test_scan_result_data(self):
\end_layout

\begin_layout Plain Layout

        result = s1duplicates.scan_duplicates(self.root)
\end_layout

\begin_layout Plain Layout

        self.assertTrue(
\end_layout

\begin_layout Plain Layout

            isinstance(result.data, collections.Mapping))
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

    def test_duplicate_number(self):
\end_layout

\begin_layout Plain Layout

        result = s1duplicates.scan_duplicates(self.root)
\end_layout

\begin_layout Plain Layout

        self.assertEquel(result.duplicate_count(),
\end_layout

\begin_layout Plain Layout

                         len(self.DATASET)) 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Test directory
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
defined at 
\family typewriter
TestCase
\family default
 level
\end_layout

\begin_layout Itemize
automatically generated before each test execution
\end_layout

\begin_layout Itemize
automatically removed after each test case execution
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Same 
\family typewriter
self.DATASET
\family default
 replicated in two places
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

dataIN
\end_layout

\begin_layout Plain Layout

+-- S1A
\end_layout

\begin_layout Plain Layout

    +-- S1A_IW
\end_layout

\begin_layout Plain Layout

    |   |-- S1A_IW_RAW__0A
\end_layout

\begin_layout Plain Layout

    |   |   +-- S1A_IW_RAW__0ADV_20160619T053500.SAFE
\end_layout

\begin_layout Plain Layout

    |   +-- S1A_IW_RAW__0S
\end_layout

\begin_layout Plain Layout

    |       +-- S1A_IW_RAW__0SDV_20160619T053500.SAFE
\end_layout

\begin_layout Plain Layout

    +-- DT_SITE
\end_layout

\begin_layout Plain Layout

        |-- S1A_IW_RAW__0ADV_20160619T053500.SAFE
\end_layout

\begin_layout Plain Layout

        +-- S1A_IW_RAW__0SDV_20160619T053500.SAFE
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Unit testing framework
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Python provides a complete unit testing framework
\end_layout

\begin_layout Itemize
the 
\family typewriter
unittest
\family default
 package of the standard library
\end_layout

\begin_layout Itemize
it is based on the xUnit architecture.
 Main elements
\end_layout

\begin_deeper
\begin_layout Itemize
test fixtures
\end_layout

\begin_layout Itemize
test cases
\end_layout

\begin_layout Itemize
test suites
\end_layout

\begin_layout Itemize
test runners
\end_layout

\end_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Automatic test discovery
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
All classes inheriting form 
\family typewriter
unittest.TestCase
\family default
 are tests 
\end_layout

\begin_layout Itemize
Only methods starting with 
\family typewriter
test*
\family default
 are assumed to be tests
\end_layout

\begin_layout Itemize
There is a machinery to automatically discover all tests in a source tree:
 it relies on naming conventions and only files starting with 
\family typewriter
test*.py
\family default
 are considered
\end_layout

\end_deeper
\begin_layout Block

\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
unittest
\family default
 package
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class TestStringMethods(unittest.TestCase):
\end_layout

\begin_layout Plain Layout

    def setUp(self):
\end_layout

\begin_layout Plain Layout

        # prepare preconditions before test execution:
\end_layout

\begin_layout Plain Layout

        # objects creation, initialization, etc.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def tearDown(self):
\end_layout

\begin_layout Plain Layout

        # perform cleanup actions after the test execution
\end_layout

\begin_layout Plain Layout

        # e.g.
 remove files, closes connections, etc.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def test_something(self):
\end_layout

\begin_layout Plain Layout

        # specific test case: use assertions
\end_layout

\begin_layout Plain Layout

        self.assertEqual(something, something_else)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    # run all tests when executed as a script
\end_layout

\begin_layout Plain Layout

    unittest.main()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mixin classes in Python
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Mixin classes factorize some common behavior that can be part of possibly
 unrelated classes
\end_layout

\begin_layout Itemize
Usually mixins does not have a complete state
\end_layout

\begin_layout Itemize
Features of a mixin are included by inheriting it
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class CreateTestDirMixin(object):
\end_layout

\begin_layout Plain Layout

    ROOT = 'dataIN'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def setUp(self):
\end_layout

\begin_layout Plain Layout

        self.testdir = tempfile.mkdtemp()
\end_layout

\begin_layout Plain Layout

        self.root = os.path.join(self.testdir, self.ROOT)
\end_layout

\begin_layout Plain Layout

        self._setup_test_dataset()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def tearDown(self):
\end_layout

\begin_layout Plain Layout

        shutil.rmtree(self.testdir)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Creating the dataset tree
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

DATASET = ( ...
 )
\end_layout

\begin_layout Plain Layout

REPLICA_DIR = 'S1A/DT_SITE'
\end_layout

\begin_layout Plain Layout

DEFAULTSIZE = 1024
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def _setup_test_dataset(self)
\end_layout

\begin_layout Plain Layout

    replicadir = os.path.join(self.root, self.REPLICA_DIR)
\end_layout

\begin_layout Plain Layout

    os.makedirs(replicadir)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for path in self.DATASET:
\end_layout

\begin_layout Plain Layout

        dirname, basename = os.path.split(path)
\end_layout

\begin_layout Plain Layout

        dirname = os.path.join(self.root, dirname)
\end_layout

\begin_layout Plain Layout

        os.makedirs(dirname)
\end_layout

\begin_layout Plain Layout

        filename = os.path.join(dirname, basename)
\end_layout

\begin_layout Plain Layout

        create_dummy_file(filename, self.DEFAULTSIZE) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        replica = os.path.join(replicadir, basename)
\end_layout

\begin_layout Plain Layout

        create_dummy_file(replica, self.DEFAULTSIZE)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Creating dummy files
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def create_dummy_file(filename, size=None):
\end_layout

\begin_layout Plain Layout

    with open(filename, 'wb') as fd:
\end_layout

\begin_layout Plain Layout

        if size:
\end_layout

\begin_layout Plain Layout

            fd.seek(size-1)
\end_layout

\begin_layout Plain Layout

            fd.write(b'
\backslash
0')
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Note
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
using the 
\family typewriter
filelike_obj.seek
\family default
 method it is possible to create potentially huge files without managing
 large buffers and performing virtually no I/O: just one byte is written
\end_layout

\begin_layout Itemize
please note the 
\family typewriter
bytes
\family default
 literal (
\family typewriter
b'
\backslash
0'
\family default
)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Run the test suite
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ python3 test_s1duplicates.py
\end_layout

\begin_layout Plain Layout

====================================================
\end_layout

\begin_layout Plain Layout

ERROR: test_scan_result (__main__.ScanDuplicatesTestCase)
\end_layout

\begin_layout Plain Layout

----------------------------------------------------
\end_layout

\begin_layout Plain Layout

Traceback ...
\end_layout

\begin_layout Plain Layout

result = s1duplicates.scan_duplicates(self.root)
\end_layout

\begin_layout Plain Layout

AttributeError: module 's1duplicates' has no attribute
\end_layout

\begin_layout Plain Layout

'scan_duplicates'
\end_layout

\begin_layout Plain Layout

====================================================
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Ran 3 tests in 0.004s
\end_layout

\begin_layout Plain Layout

FAILED (errors=3)
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Note
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
None of the test pass at this stage, we just have an empty 
\family typewriter
s1duplicate.py
\family default
 module
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Step 2: write the code
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def scan_duplicates(dataroot):
\end_layout

\begin_layout Plain Layout

    scanned_files = 0
\end_layout

\begin_layout Plain Layout

    data = defaultdict(list)
\end_layout

\begin_layout Plain Layout

    for root, dirs, files in os.walk(dataroot):
\end_layout

\begin_layout Plain Layout

        scanned_files += len(files)
\end_layout

\begin_layout Plain Layout

        for filename in files:
\end_layout

\begin_layout Plain Layout

            fullpath = os.path.join(root, filename)
\end_layout

\begin_layout Plain Layout

            if not os.path.islink(fullpath):
\end_layout

\begin_layout Plain Layout

                data[filename].append(fullpath)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # remove non duplicates
\end_layout

\begin_layout Plain Layout

    for key in list(data.keys()):  # note: copy keys
\end_layout

\begin_layout Plain Layout

        val = data[key]
\end_layout

\begin_layout Plain Layout

        if len(val) < 2:
\end_layout

\begin_layout Plain Layout

            del data[key]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return Result(data, scanned_files)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
...
 and the 
\family typewriter
Result
\family default
 class
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class Result(object):
\end_layout

\begin_layout Plain Layout

    def __init__(self, data, scanned_files):
\end_layout

\begin_layout Plain Layout

        self.data = data
\end_layout

\begin_layout Plain Layout

        self.scanned_files = scanned_files
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def duplicate_count(self):
\end_layout

\begin_layout Plain Layout

        values = self.data.values()
\end_layout

\begin_layout Plain Layout

        return sum(len(item) - 1 for item in values)
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Test execution
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ python3 test_s1duplicates.py
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

-----------------------------------------
\end_layout

\begin_layout Plain Layout

Ran 3 tests in 0.003s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OK 
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
New requirement: computation of wasted disk space
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def test_duplicate_size(self):
\end_layout

\begin_layout Plain Layout

    result = s1duplicates.scan_duplicates(self.root)
\end_layout

\begin_layout Plain Layout

    size = self.DEFAULTSIZE * len(self.DATASET)
\end_layout

\begin_layout Plain Layout

    self.assertEqual(result.duplicate_size(), size) 
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Test execution
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

ERROR: test_duplicate_size ...
\end_layout

\begin_layout Plain Layout

-----------------------------------------------------
\end_layout

\begin_layout Plain Layout

Traceback (most recent call last): ...
\end_layout

\begin_layout Plain Layout

    self.assertEqual(result.duplicate_size(), size)
\end_layout

\begin_layout Plain Layout

AttributeError: 'Result' object has no attribute
\end_layout

\begin_layout Plain Layout

'duplicate_size'
\end_layout

\begin_layout Plain Layout

-----------------------------------------------------
\end_layout

\begin_layout Plain Layout

Ran 4 tests in 0.005s
\end_layout

\begin_layout Plain Layout

FAILED (errors=1)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
New requirement ...
 implementation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def duplicate_size(self):
\end_layout

\begin_layout Plain Layout

    size = 0
\end_layout

\begin_layout Plain Layout

    for key in self.data:
\end_layout

\begin_layout Plain Layout

        duplicates = self.data[key]
\end_layout

\begin_layout Plain Layout

        filename = duplicates[0]    # first path
\end_layout

\begin_layout Plain Layout

        filesize = os.path.getsize(filename)
\end_layout

\begin_layout Plain Layout

        size += filesize * (len(duplicates) - 1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return size 
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Test execution
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

....
\end_layout

\begin_layout Plain Layout

Ran 4 tests in 0.005s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OK 
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Command line interface
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,basicstyle={\scriptsize},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ python3 s1duplicates.py -h
\end_layout

\begin_layout Plain Layout

usage: s1duplicates.py [-h] [--version] [-s] [-l] [-v] dataroot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Search all duplicate files in the specified directory tree
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

positional arguments:
\end_layout

\begin_layout Plain Layout

  dataroot            the root of the directory tree to scan
\end_layout

\begin_layout Plain Layout

                      for duplicates
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

optional arguments:
\end_layout

\begin_layout Plain Layout

  -h, --help          show this help message and exit
\end_layout

\begin_layout Plain Layout

  --version           show program's version number and exit
\end_layout

\begin_layout Plain Layout

  -s, --compute-size  compute the total size of duplicate files
\end_layout

\begin_layout Plain Layout

                      (default: False)
\end_layout

\begin_layout Plain Layout

  -l, --list-files    dump the entire list of duplicate files
\end_layout

\begin_layout Plain Layout

                      (default: False)
\end_layout

\begin_layout Plain Layout

  -v, --verbose       print verbose help messages
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Sample output
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ python3 s1duplicates.py dataIN
\end_layout

\begin_layout Plain Layout

2 duplicate files found
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ python3 s1duplicates.py -s dataIN
\end_layout

\begin_layout Plain Layout

2 duplicate files found
\end_layout

\begin_layout Plain Layout

2.00 Bytes of duplicate files can be removed
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ python3 s1duplicates.py -l dataIN
\end_layout

\begin_layout Plain Layout

2 duplicate files found
\end_layout

\begin_layout Plain Layout

Duplicates in "dataIN/"
\end_layout

\begin_layout Plain Layout

defaultdict(<class 'list'>,
\end_layout

\begin_layout Plain Layout

{'BASENAME_1.SAFE': ['FULLPATH_1.SAFE', 'FULLPATH_2.SAFE'],
\end_layout

\begin_layout Plain Layout

 'BASENAME_2.SAFE': ['FULLPATH_3.SAFE', 'FULLPATH_4.SAFE']}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Unittests for the command line UI (1/3)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class UiTestCase(CreateTestDirMixin, unittest.TestCase):
\end_layout

\begin_layout Plain Layout

    VERSION = '1.0'
\end_layout

\begin_layout Plain Layout

    BASEARGS = [sys.executable, '-u', 's1duplicates.py']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def test_version(self):
\end_layout

\begin_layout Plain Layout

        args = self.BASEARGS + ['--version']
\end_layout

\begin_layout Plain Layout

        outbytes = subprocess.check_output(args)
\end_layout

\begin_layout Plain Layout

        out = outbytes.decode('utf-8')
\end_layout

\begin_layout Plain Layout

        self.assertTrue(self.VERSION in out)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def test_help(self):
\end_layout

\begin_layout Plain Layout

        args = self.BASEARGS + ['--help']
\end_layout

\begin_layout Plain Layout

        outbytes = subprocess.check_output(args)
\end_layout

\begin_layout Plain Layout

        out = outbytes.decode('utf-8')
\end_layout

\begin_layout Plain Layout

        self.assertTrue(out.startswith('usage:'))
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Unittests for the command line UI (2/3)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def test_duplicate_number(self):
\end_layout

\begin_layout Plain Layout

    args = self.BASEARGS + [self.root]
\end_layout

\begin_layout Plain Layout

    outbytes = subprocess.check_output(args)
\end_layout

\begin_layout Plain Layout

    out = outbytes.decode('utf-8')
\end_layout

\begin_layout Plain Layout

    self.assertEqual(
\end_layout

\begin_layout Plain Layout

        out.strip(),
\end_layout

\begin_layout Plain Layout

        '%d duplicate files found' % len(self.DATASET))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def test_duplicate_size(self):
\end_layout

\begin_layout Plain Layout

    args = self.BASEARGS + ['-s', self.root]
\end_layout

\begin_layout Plain Layout

    outbytes = subprocess.check_output(args)
\end_layout

\begin_layout Plain Layout

    out = outbytes.decode('utf-8')
\end_layout

\begin_layout Plain Layout

    count_line, size_line = out.strip().splitlines()
\end_layout

\begin_layout Plain Layout

    size = self.DEFAULTSIZE * len(self.DATASET)
\end_layout

\begin_layout Plain Layout

    self.assertEqual(
\end_layout

\begin_layout Plain Layout

        size_line,
\end_layout

\begin_layout Plain Layout

        'duplicate file size: %s' % pretty_file_size_str(size))
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
A bit of regular expressions (
\family typewriter
re
\family default
)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
ITEM_RE
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

"'(?P<key>.*
\backslash
.SAFE)':
\end_layout

\begin_layout Plain Layout


\backslash
[(?P<values>'.*
\backslash
.SAFE'(,
\backslash
s+'.*
\backslash
.SAFE')*
\backslash
])"
\end_layout

\end_inset


\end_layout

\begin_layout Description
.: matches any character
\end_layout

\begin_layout Description
.*: matches an arbitrary number of characters
\end_layout

\begin_layout Description

\backslash
.: (escaped dot) matches a dot
\end_layout

\begin_layout Description
.*
\backslash
.SAFE: is equivalent to the glob expression 
\family typewriter
*.SAFE
\end_layout

\begin_layout Description
(?P<key>.*
\backslash
.SAFE): the matched expression is saved into the group named 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description

\backslash
s: matches ant white character
\end_layout

\begin_layout Description

\backslash
s+: matches one or more (at least one) white character
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Unittests for the command line UI (3/3)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

def test_duplicate_list(self):
\end_layout

\begin_layout Plain Layout

    args = self.BASEARGS + ['-l', self.root]
\end_layout

\begin_layout Plain Layout

    outbytes = subprocess.check_output(args)
\end_layout

\begin_layout Plain Layout

    out = outbytes.decode('utf-8')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    keys = set(
\end_layout

\begin_layout Plain Layout

        os.path.basename(item) for item in self.DATASET)
\end_layout

\begin_layout Plain Layout

    found_keys = []
\end_layout

\begin_layout Plain Layout

    for i, mobj in enumerate(self.ITEM_RE.finditer(out)):
\end_layout

\begin_layout Plain Layout

        key = mobj.group('key')
\end_layout

\begin_layout Plain Layout

        self.assertTrue(key in keys)
\end_layout

\begin_layout Plain Layout

        found_keys.append(key)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        values = mobj.group('values')
\end_layout

\begin_layout Plain Layout

        self.assertEqual(len(values.split(',')), 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    self.assertEqual(len(found_keys), len(keys))
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Command line UI implementation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

parser = ArgumentParser(description='Search all '
\end_layout

\begin_layout Plain Layout

    'duplicate files in the specified directory tree')
\end_layout

\begin_layout Plain Layout

parser.add_argument(
\end_layout

\begin_layout Plain Layout

    '--version', action='version', version='%(prog)s v1.0')
\end_layout

\begin_layout Plain Layout

parser.add_argument('-s', '--compute-size',
\end_layout

\begin_layout Plain Layout

    action='store_true', default=False, help='compute '
\end_layout

\begin_layout Plain Layout

    'the total size of duplicate files '
\end_layout

\begin_layout Plain Layout

    '(default: %(default)s)')
\end_layout

\begin_layout Plain Layout

parser.add_argument('-l', '--list-files',
\end_layout

\begin_layout Plain Layout

    action='store_true', default=False,
\end_layout

\begin_layout Plain Layout

    help='dump the entire list of duplicate files '
\end_layout

\begin_layout Plain Layout

    '(default: %(default)s)')
\end_layout

\begin_layout Plain Layout

parser.add_argument('-v', '--verbose', action='store_true',
\end_layout

\begin_layout Plain Layout

    default=False, help='print verbose help messages')
\end_layout

\begin_layout Plain Layout

parser.add_argument('dataroot', help='the root of the '
\end_layout

\begin_layout Plain Layout

    'directory tree to scan for duplicates')
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Main program
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

args = parser.parse_args()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if args.verbose:
\end_layout

\begin_layout Plain Layout

    logging.getLogger().setLevel(logging.DEBUG)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

result = scan_duplicates(args.dataroot)
\end_layout

\begin_layout Plain Layout

logging.info(
\end_layout

\begin_layout Plain Layout

    '%d duplicate files found' % result.duplicate_count())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if args.compute_size:
\end_layout

\begin_layout Plain Layout

    size = result.duplicate_size()
\end_layout

\begin_layout Plain Layout

    sizestr = prettysize.pretty_file_size_str(size)
\end_layout

\begin_layout Plain Layout

    logging.info(
\end_layout

\begin_layout Plain Layout

        '%s of duplicate files can be removed' % sizestr)
\end_layout

\begin_layout Plain Layout

if args.list_files:
\end_layout

\begin_layout Plain Layout

    logging.info('Duplicates in "%s"' % args.dataroot)
\end_layout

\begin_layout Plain Layout

    pprint.pprint(result.data) 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section
References
\end_layout

\begin_layout Frame
\begin_inset Argument 3
status collapsed

\begin_layout Plain Layout
allowframebreaks
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
References
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pythondoc"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Official Python documentation"
target "https://docs.python.org"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pythontut"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Official Python tutorial"
target "https://docs.python.org/3/tutorial/index.html"

\end_inset

 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key " IdiomaticPython"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Code Like a Pythonista: Idiomatic Python"
target "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"

\end_inset

, by David Goodger
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "PythonIntro"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Introduction to Python"
target "http://www.slideshare.net/nowells/introduction-to-python-5182313"

\end_inset

, by Nowell Strite
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
beamertemplatebookbibitems
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DiveIntoPython3"

\end_inset

Mark Pilgrim
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 
\begin_inset CommandInset href
LatexCommand href
name "Dive into Python 3"
target "http://www.diveintopython3.net"

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 Apress 2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Alex Martelli
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 
\begin_inset CommandInset href
LatexCommand href
name "Python in a Nutshell, 3rd Edition"
target "https://library.oreilly.com/book/0636920012610/python-in-a-nutshell/toc"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 O'Reilly 2016
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "LeraningPython"

\end_inset

Mark Lutz
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 Learning Python, 5th Edition - Powerful Object-Oriented Programming 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 O'Reilly 2013
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ProgremmingInPython3"

\end_inset

Mark Summerfield
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 Programming in Python 3: A Complete Introduction to the Python Language
 (Second Edition)
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 Addison-Wesley, November 2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Berri"

\end_inset

Marco Beri
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 Python
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 Apogeo 2010
\end_layout

\end_deeper
\end_body
\end_document
