#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)

% custom listing style
%\lstdefinestyle{cpython}{
%  belowcaptionskip=1\baselineskip,
%  breaklines=true,
%  frame=L,
%  xleftmargin=\parindent,
%  language=Python,
%  showstringspaces=false,
%  basicstyle=\footnotesize\ttfamily,
%  keywordstyle=\bfseries\color{green!40!black},
%  commentstyle=\itshape\color{purple!40!black},
%  identifierstyle=\color{blue},
%  stringstyle=\color{orange},
%}

%basicstyle={\footnotesize\ttfamily}
%commentstyle={\itshape\color{green!40!black}}
%directivestyle={\bfseries\color{blue!40!black}}
%identifierstyle={\color{black}}
%indexstyle={\color{black}}
%keywordstyle={\bfseries\color{blue!40!black}}
%ndkeywordstyle={\bfseries\color{blue!40!black}}
%numberstyle={\color{orange}}
%procnamestyle={\color{blue}}
%stringstyle={\color{magenta}}
%tagstyle={\color{orange}}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "urlcolor=blue, linkcolor=black"
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\footnotesize\ttfamily},commentstyle={\itshape\color{green!40!black}},identifierstyle={\color{black}},indexstyle={\color{black}},keywordstyle={\bfseries\color{blue!40!black}},ndkeywordstyle={\bfseries\color{blue!40!black}},stringstyle={\color{magenta}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This file is a solution template for:
\end_layout

\begin_layout Itemize
Talk at a conference/colloquium.
 
\end_layout

\begin_layout Itemize
Talk length is about 20min.
 
\end_layout

\begin_layout Itemize
Style is ornate.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
Python Training
\end_layout

\begin_layout Author
A.
\begin_inset space ~
\end_inset

Valentino
\end_layout

\begin_layout Date
Aresys internal course June 2016
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pgfdeclareimage[height=0.5cm]{images/aresys}{images/aresys}
\end_layout

\begin_layout Plain Layout

%
\backslash
logo{
\backslash
pgfuseimage{images/aresys}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{%
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Itemize
Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Itemize
At *most* three subsections per section.
 
\end_layout

\begin_layout Itemize
Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Itemize
A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Itemize
In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Itemize
If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section
What is Python
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Language features
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
General-purpose programming language
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 C, C++ and Java, 
\series bold
differemtly
\series default
 from Matlab
\end_layout

\begin_layout Itemize
Scripting, GUI, Web, scientific programming, ...
\end_layout

\end_deeper
\begin_layout Itemize
Multi paradigm
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 C++, 
\series bold
differently
\series default
 from Java
\end_layout

\begin_layout Itemize
OOP, procedural, and also a little bit functional
\end_layout

\end_deeper
\begin_layout Itemize
Interpreted
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 Java, 
\series bold
differently
\series default
 form C, C++ and Fortran
\end_layout

\end_deeper
\begin_layout Itemize
Focus on readability and productivity
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Typing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Dynamically typed
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 Matlab, 
\series bold
differently
\series default
 from C, C++ and Java
\end_layout

\end_deeper
\begin_layout Itemize
Strongly typed
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
like
\series default
 C, C++ and Java, 
\series bold
differently
\series default
 from Tcl/Tk and Perl
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Typing: examples
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Perl
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Perl,tabsize=4"
inline false
status open

\begin_layout Plain Layout

DB<1> print "2" + 2
\end_layout

\begin_layout Plain Layout

4
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Python
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

>>> "2" + 2
\end_layout

\begin_layout Plain Layout

Traceback (most recent call last):
\end_layout

\begin_layout Plain Layout

  File "<stdin>", line 1, in <module>
\end_layout

\begin_layout Plain Layout

TypeError: Can't convert 'int' object to str
\end_layout

\begin_layout Plain Layout

implicitly
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Language versions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Python 2
\end_layout

\begin_deeper
\begin_layout Itemize
latest version: 2.7.11
\end_layout

\begin_layout Itemize
maintenance mode
\end_layout

\begin_layout Itemize
end of life: 2020
\end_layout

\end_deeper
\begin_layout Itemize
Python 3
\end_layout

\begin_deeper
\begin_layout Itemize
latest version: 3.5.1
\end_layout

\begin_layout Itemize
language cleanup
\end_layout

\begin_layout Itemize
drop a lot of deprected features
\end_layout

\begin_layout Itemize

\series bold
breaks compatibility
\series default
 with Python 2
\end_layout

\begin_layout Itemize
...
 but not too much if you import from 
\begin_inset Flex Emphasize
status open

\begin_layout Plain Layout
__future__
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Implementations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
CPython (the reference and most widely used implementation written in C)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.python.org
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
PyPy (A fast python implementation with a JIT compiler)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pypy.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
compatibility: Python 2.7.10 and Python 3.2.5 (beta)
\end_layout

\end_deeper
\begin_layout Itemize
IronPython (Python running on .NET)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://ironpython.net
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
support for Python 2.7
\end_layout

\end_deeper
\begin_layout Itemize
Jython (Python running on the Java Virtual Machine)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.jython.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
support for Python 2.7
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Language Basics
\end_layout

\begin_layout Subsection
Dive in
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Hello, World!
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Python
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

print('Hello, World!')
\end_layout

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Java,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class HelloWorld
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public static void main(String[] args)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        System.out.println("Hello, world!");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Interpreter invocation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Run a script
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

$ python3 script.py
\end_layout

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Interactive mode
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

$ python3
\end_layout

\begin_layout Plain Layout

Python 3.5.1+ (Mar 30 2016, 22:46:26) on linux 
\end_layout

\begin_layout Plain Layout

Type "help", "copyright", "credits" or "license" for
\end_layout

\begin_layout Plain Layout

more information.
\end_layout

\begin_layout Plain Layout

>>> import os
\end_layout

\begin_layout Plain Layout

>>> os.path.getsize('python-training.lyx')
\end_layout

\begin_layout Plain Layout

20366
\end_layout

\begin_layout Plain Layout

>>> _
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Improved interactive shell: IPython
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Hint
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Use 
\emph on
Jupyter Console
\emph default
 (a.k.a.
 
\emph on
IPython)
\emph default
 or 
\emph on
Jupyter QtConsole
\emph default
 for your interactive shell sessions.
 It provides:
\end_layout

\begin_layout Itemize
better autocompletion
\end_layout

\begin_layout Itemize
enhanced history management
\end_layout

\begin_layout Itemize
session profiles
\end_layout

\begin_layout Itemize
easy integration with the system shell
\end_layout

\begin_layout Itemize
easy integration with GUI environment
\end_layout

\begin_layout Itemize
easy integration with the scientific toolchain
\end_layout

\begin_layout Standard
Links:
\end_layout

\begin_layout Itemize
Jupyter Project: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://jupyter.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Ipython: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://ipython.org
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introspection
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
IPython session
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

In [1]: s = 'ciao'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: len(s)
\end_layout

\begin_layout Plain Layout

Out[2]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: type(s)
\end_layout

\begin_layout Plain Layout

Out[3]: str
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: dir(s)
\end_layout

\begin_layout Plain Layout

Out[4]: ['__add__',
\end_layout

\begin_layout Plain Layout

'__class__',
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

'translate',
\end_layout

\begin_layout Plain Layout

'upper',
\end_layout

\begin_layout Plain Layout

'zfill']
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Getting help
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\emph on
help
\emph default
 builtin function
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline true
status open

\begin_layout Plain Layout

help()
\end_layout

\end_inset

: start an interactive help session
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline true
status open

\begin_layout Plain Layout

help(soemthing)
\end_layout

\end_inset

: print help about an object or type
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline true
status open

\begin_layout Plain Layout

help('name')
\end_layout

\end_inset

: search for 'name' in builtin functions and types and print the relative
 help
\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\emph on
help
\emph default
 example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

In [6]: help(str)
\end_layout

\begin_layout Plain Layout

Help on class str in module builtins:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class str(object)
\end_layout

\begin_layout Plain Layout

|  str(object='') -> str
\end_layout

\begin_layout Plain Layout

|  str(bytes_or_buffer[, encoding[, errors]]) -> str
\end_layout

\begin_layout Plain Layout

|  ...
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Getting help in IPython
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
IPython enchanced help tools
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

In [6]: str?
\end_layout

\begin_layout Plain Layout

Type:            type
\end_layout

\begin_layout Plain Layout

String form:     <class 'str'>
\end_layout

\begin_layout Plain Layout

Namespace:       Python builtin
\end_layout

\begin_layout Plain Layout

Init definition: str(self, *args, **kwargs)
\end_layout

\begin_layout Plain Layout

Docstring:
\end_layout

\begin_layout Plain Layout

str(object='') -> str
\end_layout

\begin_layout Plain Layout

str(bytes_or_buffer[, encoding[, errors]]) -> str
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Create a new string object from the given object.
\end_layout

\begin_layout Plain Layout

If encoding or ...
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Pretty file size example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

def pretty_file_size_str(size):
\end_layout

\begin_layout Plain Layout

    '''String representation of file size
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Get the size in bytes and return the string
\end_layout

\begin_layout Plain Layout

    representation using appropriate units.
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if size >= 2**20:
\end_layout

\begin_layout Plain Layout

        size /= 2**20
\end_layout

\begin_layout Plain Layout

        units = 'MB'
\end_layout

\begin_layout Plain Layout

    elif size >= 2**10:
\end_layout

\begin_layout Plain Layout

        size /= 2**10
\end_layout

\begin_layout Plain Layout

        units = 'KB'
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        units = 'Bytes'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return '%.3f %s' % (size, units)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Documentation string a.k.a.
 
\emph on
docstrings
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
It is used as 
\emph on
docstring
\emph default
 the first string in the boby of
\end_layout

\begin_deeper
\begin_layout Itemize
functions/methods
\end_layout

\begin_layout Itemize
user types (classes)
\end_layout

\begin_layout Itemize
modules
\end_layout

\end_deeper
\begin_layout Itemize
All objects (in particular the ones exposed in the public API) shall have
 a docstring
\end_layout

\begin_layout Itemize
Docstrings are 
\emph on
propertyies
\emph default
 of the object and are stored in the 
\family typewriter
\series bold
__doc__
\family default
\series default
 special attribute
\end_layout

\begin_layout Itemize
Docstrings are used by the 
\emph on
help
\emph default
 function to display object help
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Note
\end_layout

\end_inset


\end_layout

\begin_layout Block
In the above example a 
\emph on
multi-line
\emph default
 string has been used as a docstring.
\end_layout

\begin_layout Block
Multi-line strings are defined using 
\emph on
triple quote
\emph default
: 
\family typewriter
\series bold

\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset


\family default
\series default
 or 
\family typewriter
\series bold
'''
\family default
\series default
.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Indentation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Important: white spaces are syntaptically significant
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Indentation is used to determine the grouping of statements.
\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Example
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

if filename.endswith('.txt'):
\end_layout

\begin_layout Plain Layout

    print('text file:', filename)  # only executed for
\end_layout

\begin_layout Plain Layout

    print('bla bla bla')           # '*.txt' files
\end_layout

\begin_layout Plain Layout

print('Opening:', filename)  # <-- always executed 
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Hint
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Never mix tabs and spaces for indentation (--> syntax error)
\end_layout

\begin_layout Itemize
Always use 4 (four) spaces to indent your code (it is the most widely adopted
 coding convention in teh Python echosystem)
\end_layout

\end_deeper
\begin_layout Block

\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
how to run a script
\end_layout

\begin_layout Itemize
interactive sessions
\end_layout

\begin_layout Itemize
introspection
\end_layout

\begin_layout Itemize
function definition
\end_layout

\begin_layout Itemize
string formatting
\end_layout

\begin_layout Itemize
docstrings
\end_layout

\begin_layout Itemize
indentaton
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.45
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
builtins functions and types:
\end_layout

\begin_deeper
\begin_layout Itemize
print
\end_layout

\begin_layout Itemize
dir
\end_layout

\begin_layout Itemize
help
\end_layout

\begin_layout Itemize
len
\end_layout

\begin_layout Itemize

\emph on
str
\emph default
 and the 
\emph on
str.endswith
\emph default
 metod
\end_layout

\end_deeper
\begin_layout Itemize
keywords and statements
\end_layout

\begin_deeper
\begin_layout Itemize
if elif else
\end_layout

\begin_layout Itemize
def
\end_layout

\begin_layout Itemize
return
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Basic types and containers
\end_layout

\begin_layout Subsubsection
Numbers
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Numeric types
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: type(5)
\end_layout

\begin_layout Plain Layout

Out[1]: int
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: type(2.3)
\end_layout

\begin_layout Plain Layout

Out[2]: float
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: type(1 + 3j)
\end_layout

\begin_layout Plain Layout

Out[3]: complex
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: c = 1 + 3j
\end_layout

\begin_layout Plain Layout

In [5]: type(c.real)
\end_layout

\begin_layout Plain Layout

Out[5]: float
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: big = 2**65  # pow(2, 65) does not fit in a C long
\end_layout

\begin_layout Plain Layout

In [7]: type(bigint), big
\end_layout

\begin_layout Plain Layout

Out[7]: (int, 36893488147419103232) 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Numeric casts and conversion
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Casting
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [8]: int(2.1)         # cast
\end_layout

\begin_layout Plain Layout

Out[8]: 2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: complex(2)       # cast
\end_layout

\begin_layout Plain Layout

Out[9]: (2+0j)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: float(1)        # cast
\end_layout

\begin_layout Plain Layout

Out[10]: 1.0
\end_layout

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Conversion from string
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [11]: float('1.3e-2')  # conversion from string
\end_layout

\begin_layout Plain Layout

Out[11]: 0.013
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [12]: 2 + 2    # sum
\end_layout

\begin_layout Plain Layout

Out[12]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [13]: 2 - 2    # subtraction
\end_layout

\begin_layout Plain Layout

Out[13]: 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [14]: 3 * 3    # product
\end_layout

\begin_layout Plain Layout

Out[14]: 9
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [15]: 3 ** 2   # pow
\end_layout

\begin_layout Plain Layout

Out[15]: 9
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [16]: n = 1
\end_layout

\begin_layout Plain Layout

In [17]: n *= 2.
  # inplace product
\end_layout

\begin_layout Plain Layout

In [18]: n
\end_layout

\begin_layout Plain Layout

Out[18]: 2.0      # NOTE: type propotion (n = n * 2)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Division operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [19]: 3 / 2    # division
\end_layout

\begin_layout Plain Layout

Out[19]: 1.5      # IMPORTANT: always "true" division (always float)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [20]: -3.
 // 2 # floor division
\end_layout

\begin_layout Plain Layout

Out[20]: -2.0     # NOTE: type is preserved
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [21]: 3.
 % 2   # reminder
\end_layout

\begin_layout Plain Layout

Out[21]: 1.
       # NOTE: type is preserved
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Important
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
The behaviou of the 
\family typewriter
\series bold
/
\family default
\series default
 (division) is changed in Python 3.
\end_layout

\begin_layout AlertBlock
Previously it was nat a 
\begin_inset Quotes eld
\end_inset

true division
\begin_inset Quotes erd
\end_inset

 if both opernds was integers.
\end_layout

\begin_layout AlertBlock
Please always use:
\end_layout

\begin_layout AlertBlock
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

from __future__ import division
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
to get the 
\emph on
correct
\emph default
 behavior also in Python 2
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Comparison operators
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [22]: 2 == 2.
\end_layout

\begin_layout Plain Layout

Out[22]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [23]: 3 != 2
\end_layout

\begin_layout Plain Layout

Out[23]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [24]: 3.
 >= 2       # >, <, >=, <=
\end_layout

\begin_layout Plain Layout

Out[24]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [25]: a = 0.5
\end_layout

\begin_layout Plain Layout

In [26]: 0 <= a < 1    # Very nice: a in [0,1[
\end_layout

\begin_layout Plain Layout

Out[26]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [27]: 1j > 2.
\end_layout

\begin_layout Plain Layout

TypeError                 Traceback (most recent call last)
\end_layout

\begin_layout Plain Layout

[...]
\end_layout

\begin_layout Plain Layout

TypeError: unorderable types: complex() > int() 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
Strings
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Strings
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
String are 
\series bold
immutable
\series default
 sequences of characters
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "language=Python"
inline true
status open

\begin_layout Plain Layout

text.replace('
\backslash
t', '   ')
\end_layout

\end_inset

 --> a 
\series bold
new string
\series default
 is created
\end_layout

\end_deeper
\begin_layout Itemize
There are two kind of strings:
\end_layout

\begin_deeper
\begin_layout Itemize
the 
\series bold
\emph on
str
\series default
\emph default
 type: are strings of unicode characters
\end_layout

\begin_layout Itemize
the 
\series bold
\emph on
bytes
\series default
\emph default
 type: are string of 8-bit characters
\end_layout

\begin_layout Itemize
conversion between string types requires encoding/decoding
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "language=Python"
inline true
status open

\begin_layout Plain Layout

str.encode('ascii') --> bytes
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Python"
inline true
status open

\begin_layout Plain Layout

bytes.decode('UTF-8') --> str
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Backward incompatible change in Python 3
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
(Python 2) bytes == (Python 3) bytes
\end_layout

\begin_layout Itemize
(Python 2) bytes == (Python 2) str == (Python 3) bytes
\end_layout

\begin_layout Itemize
(Python 2) unicode == (Python 3) str
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
String literals
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: ('ciao' == "ciao") and ('ciao' == u'ciao')
\end_layout

\begin_layout Plain Layout

Out[1]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: type('ciao'), type(b'ciao')    # str vs bytes
\end_layout

\begin_layout Plain Layout

Out[2]: (str, bytes) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: r'Hello,
\backslash
nWorld!'    # raw strings
\end_layout

\begin_layout Plain Layout

Out[3]: 'Hello,
\backslash

\backslash
nWorld!' 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: s = '''Hello,
\end_layout

\begin_layout Plain Layout

World!'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: s    # --> repr(s)
\end_layout

\begin_layout Plain Layout

Out[5]: 'Hello,
\backslash
nWorld!'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: print(s)
\end_layout

\begin_layout Plain Layout

Hello,
\end_layout

\begin_layout Plain Layout

World! 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Main string methods
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.25
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color blue
isalnum
\end_layout

\begin_layout Itemize

\color blue
isalpha
\end_layout

\begin_layout Itemize

\color blue
isdecimal
\end_layout

\begin_layout Itemize

\color blue
isdigit
\end_layout

\begin_layout Itemize

\color blue
isidentifier
\end_layout

\begin_layout Itemize

\color blue
islower
\end_layout

\begin_layout Itemize

\color blue
isnumeric
\end_layout

\begin_layout Itemize

\color blue
isprintable
\end_layout

\begin_layout Itemize

\color blue
isspace
\end_layout

\begin_layout Itemize

\color blue
istitle
\end_layout

\begin_layout Itemize

\color blue
isupper
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.25
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color blue
startswith
\end_layout

\begin_layout Itemize

\color blue
endswith
\end_layout

\begin_layout Itemize
join
\end_layout

\begin_layout Itemize
split
\end_layout

\begin_layout Itemize
rsplit
\end_layout

\begin_layout Itemize
splitlines
\end_layout

\begin_layout Itemize
strip
\end_layout

\begin_layout Itemize
lstrip
\end_layout

\begin_layout Itemize
rstrip
\end_layout

\begin_layout Itemize
partition
\end_layout

\begin_layout Itemize
rpartition
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.25
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color magenta
lower
\end_layout

\begin_layout Itemize

\color magenta
upper
\end_layout

\begin_layout Itemize

\color magenta
capitalize
\end_layout

\begin_layout Itemize

\color magenta
casefold
\end_layout

\begin_layout Itemize

\color magenta
title
\end_layout

\begin_layout Itemize

\color magenta
swapcase
\end_layout

\begin_layout Itemize

\color red
center
\end_layout

\begin_layout Itemize

\color red
ljust
\end_layout

\begin_layout Itemize

\color red
rjust
\end_layout

\begin_layout Itemize

\color red
zfill
\end_layout

\begin_layout Itemize

\color red
expandtabs
\end_layout

\begin_layout Column
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

0.25
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color cyan
count
\end_layout

\begin_layout Itemize

\color cyan
find
\end_layout

\begin_layout Itemize

\color cyan
rfind
\end_layout

\begin_layout Itemize

\color cyan
replace
\end_layout

\begin_layout Itemize

\color cyan
translate
\end_layout

\begin_layout Itemize

\color cyan
index
\end_layout

\begin_layout Itemize

\color cyan
rindex
\end_layout

\begin_layout Itemize

\color green
format
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other string tools
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: len('ciao')
\end_layout

\begin_layout Plain Layout

Out[2]: 4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: 'World' in 'Hello, World!'
\end_layout

\begin_layout Plain Layout

Out[2]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: 'Hello, ' + 'World!'
\end_layout

\begin_layout Plain Layout

Out[3]: 'Hello, World!'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: 'ciao' * 2
\end_layout

\begin_layout Plain Layout

Out[4]: 'ciaociao'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [5]: 'aaa' < 'bbb'
\end_layout

\begin_layout Plain Layout

Out[5]: True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [6]: import string     # 'string' is a module
\end_layout

\begin_layout Plain Layout

In [7]: s = string.ascii_lowercase   # s = 'abcdefghi...'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Indexing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [8]: s[2]    # zero based indexing
\end_layout

\begin_layout Plain Layout

Out[8]: 'c'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [9]: s[0:2]  # start included, stop excluded
\end_layout

\begin_layout Plain Layout

Out[9]: 'ab'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [10]: s[:13], s[13:]  # no overlap & start/stop omitted
\end_layout

\begin_layout Plain Layout

Out[10]: ('abcdefghijklm', 'nopqrstuvwxyz')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [11]: s[-1]  # negative indices are OK
\end_layout

\begin_layout Plain Layout

Out[11]: 'z'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: s[1:20:3] # start:stop:step
\end_layout

\begin_layout Plain Layout

Out[12]: 'behknqt' 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [12]: s[::-1]  # negative step is OK --> revese seq.
\end_layout

\begin_layout Plain Layout

Out[12]: 'zyxwvutsrqponmlkjihgfedcba'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Printf-style string formatting
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: print('Hello, %s!' % 'World')	# %s --> str
\end_layout

\begin_layout Plain Layout

Hello, World!
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: print('%d / %d = %.2f' % (1, 3, 1/3))
\end_layout

\begin_layout Plain Layout

1 / 3 = 0.33 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: print('"%5s" <%5s> |%+10.2f|' % ('a', 'b', 1/3))
\end_layout

\begin_layout Plain Layout

"    a" <    b> |     +0.33| 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: mapping = {'name': 'Python', 'version': 3}
\end_layout

\begin_layout Plain Layout

In [5]: print('%(name)s v%(version)d' % mapping)
\end_layout

\begin_layout Plain Layout

Python v3
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Links
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

Printf-style String Formatting
\lang english
: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://docs.python.org/3/library/stdtypes.html
\backslash
#printf-style-string-formatting
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
String formatting with 
\emph on
.format()
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: print('Hello, {}!'.format('World'))
\end_layout

\begin_layout Plain Layout

Hello, World!
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [2]: print('{} / {} = {:.2f}'.format(1, 3, 1/3))
\end_layout

\begin_layout Plain Layout

1 / 3 = 0.33 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [3]: print('{name} v{version:d}'.format(
\end_layout

\begin_layout Plain Layout

   ...: name='Python', version=3))
\end_layout

\begin_layout Plain Layout

Python v3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

In [4]: print('{1}{0}{0}'.format('+', 'C'))
\end_layout

\begin_layout Plain Layout

C++
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Links
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

Format String Syntax
\lang english
: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://docs.python.org/3/library/string.html
\backslash
#format-string-syntax
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
String antipattern
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Bad
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: notes = ('do', 're', 'mi')
\end_layout

\begin_layout Plain Layout

In [2]: solfege = notes[0]
\end_layout

\begin_layout Plain Layout

   ...: for note in notes[1:]:
\end_layout

\begin_layout Plain Layout

   ...:     solfege += ', ' + note
\end_layout

\begin_layout Plain Layout

In [3]: solfege
\end_layout

\begin_layout Plain Layout

Out[3]: 'do, re, mi'
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Good
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

In [1]: notes = ('do', 're', 'mi')
\end_layout

\begin_layout Plain Layout

In [2]: solfege = ', '.join(notes)
\end_layout

\begin_layout Plain Layout

In [3]: solfege
\end_layout

\begin_layout Plain Layout

Out[3]: 'do, re, mi'
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Flow control
\end_layout

\begin_layout Subsection
Functions
\end_layout

\begin_layout Section
Object Oriented Programming
\end_layout

\begin_layout Subsection
User defined types
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Make Titles Informative.
 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Theorem
On first slide.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Corollary
On second slide.
\end_layout

\end_deeper
\begin_layout Section*
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
All of the following is optional and typically not needed.
\end_layout

\end_inset

Appendix
\end_layout

\begin_layout Subsection*
For Further Reading
\end_layout

\begin_layout Frame
\begin_inset Argument 3
status collapsed

\begin_layout Plain Layout
allowframebreaks
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
For Further Reading
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pythondoc"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Official Python documentation"
target "https://docs.python.org"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pythontut"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Official Python tutorial"
target "https://docs.python.org/3/tutorial/index.html"

\end_inset

 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key " IdiomaticPython"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Code Like a Pythonista: Idiomatic Python"
target "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"

\end_inset

, by David Goodger
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DiveIntoPython3"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Dive into Python 3"
target "http://www.diveintopython3.net"

\end_inset

, by Mark Pilgrim
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "PythonIntro"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Introduction to Python"
target "http://www.slideshare.net/nowells/introduction-to-python-5182313"

\end_inset

, by Nowell Strite
\end_layout

\end_deeper
\end_body
\end_document
